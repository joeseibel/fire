/*
 * generated by Xtext 2.10.0
 */
package fire.tests

import com.google.inject.Inject
import fire.fire.AdditiveExpression
import fire.fire.AdditiveOperator
import fire.fire.AndExpression
import fire.fire.BooleanLiteral
import fire.fire.BuiltInType
import fire.fire.ComparisonExpression
import fire.fire.ComparisonOperator
import fire.fire.ConstantDeclaration
import fire.fire.EqualityExpression
import fire.fire.EqualityOperator
import fire.fire.IdExpression
import fire.fire.IntegerLiteral
import fire.fire.MultiplicativeExpression
import fire.fire.MultiplicativeOperator
import fire.fire.NegationExpression
import fire.fire.NotExpression
import fire.fire.OrExpression
import fire.fire.Program
import fire.fire.RealLiteral
import fire.fire.StringLiteral
import fire.fire.WritelnStatement
import fire.fire.XorExpression
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.assertEquals
import static extension org.junit.Assert.assertFalse
import static extension org.junit.Assert.assertTrue

@RunWith(XtextRunner)
@InjectWith(FireInjectorProvider)
class FireParsingTest{
	@Inject
	extension ParseHelper<Program>
	@Inject
	extension ValidationTestHelper
	
	@Test
	def void testEmptyProgram() {
		'''
			program
			end
		'''.parse => [
			assertNoIssues
		]
	}
	
	@Test
	def void testStatement() {
		'''
			program
				const c1: Integer := 1
				writeln("string1")
				writeln(c1)
			end
		'''.parse => [
			assertNoIssues
			3.assertEquals(statements.size)
			statements.get(0) as ConstantDeclaration => [
				"c1".assertEquals(name)
				BuiltInType.INTEGER.assertEquals(type)
				1.assertEquals((value as IntegerLiteral).value)
			]
			"string1".assertEquals(((statements.get(1) as WritelnStatement).argument as StringLiteral).value)
			statements.get(0).assertEquals(((statements.get(2) as WritelnStatement).argument as IdExpression).value)
		]
	}
	
	@Test
	def void testOrExpression() {
		'''
			program
				writeln(true or false or true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as OrExpression => [
				left as OrExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testAndExpression() {
		'''
			program
				writeln(true and false and true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as AndExpression => [
				left as AndExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testXorExpression() {
		'''
			program
				writeln(true xor false xor true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as XorExpression => [
				left as XorExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testEqualityExpression() {
		'''
			program
				writeln(1 = 2 <> true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as EqualityExpression => [
				left as EqualityExpression => [
					1.assertEquals((left as IntegerLiteral).value)
					EqualityOperator.EQUALS.assertEquals(operator)
					2.assertEquals((right as IntegerLiteral).value)
				]
				EqualityOperator.NOT_EQUALS.assertEquals(operator)
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testComparisonExpression() {
		'''
			program
				writeln(1 < 2)
				writeln(3 <= 4)
				writeln(5 > 6)
				writeln(7 >= 8)
			end
		'''.parse => [
			assertNoIssues
			4.assertEquals(statements.size)
			(statements.get(0) as WritelnStatement).argument as ComparisonExpression => [
				1.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.LESS.assertEquals(operator)
				2.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(1) as WritelnStatement).argument as ComparisonExpression => [
				3.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.LESS_EQUAL.assertEquals(operator)
				4.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(2) as WritelnStatement).argument as ComparisonExpression => [
				5.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.GREATER.assertEquals(operator)
				6.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(3) as WritelnStatement).argument as ComparisonExpression => [
				7.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.GREATER_EQUAL.assertEquals(operator)
				8.assertEquals((right as IntegerLiteral).value)
			]
		]
	}
	
	@Test
	def void testAdditiveExpression() {
		'''
			program
				writeln(1 + 2 - 3)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as AdditiveExpression => [
				left as AdditiveExpression => [
					1.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					2.assertEquals((right as IntegerLiteral).value)
				]
				AdditiveOperator.SUBTRACT.assertEquals(operator)
				3.assertEquals((right as IntegerLiteral).value)
			]
		]
	}
	
	@Test
	def void testMultiplicativeExpression() {
		'''
			program
				writeln(1 * 2 div 3 mod 4)
				writeln(5.5 / 6.6)
			end
		'''.parse => [
			assertNoIssues
			2.assertEquals(statements.size)
			(statements.get(0) as WritelnStatement).argument as MultiplicativeExpression => [
				left as MultiplicativeExpression => [
					left as MultiplicativeExpression => [
						1.assertEquals((left as IntegerLiteral).value)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						2.assertEquals((right as IntegerLiteral).value)
					]
					MultiplicativeOperator.INTEGER_DIVIDE.assertEquals(operator)
					3.assertEquals((right as IntegerLiteral).value)
				]
				MultiplicativeOperator.MODULUS.assertEquals(operator)
				4.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(1) as WritelnStatement).argument as MultiplicativeExpression => [
				5.5.assertEquals((left as RealLiteral).value, 0)
				MultiplicativeOperator.REAL_DIVIDE.assertEquals(operator)
				6.6.assertEquals((right as RealLiteral).value, 0)
			]
		]
	}
	
	@Test
	def void testTerminalExpression() {
		'''
			program
				const c1: Integer := 1
				writeln(c1)
				writeln("string1")
				writeln(true)
				writeln(false)
				writeln(2)
				writeln(3.3)
				writeln(not true)
				writeln(-4)
				writeln((5))
			end
		'''.parse => [
			assertNoIssues
			10.assertEquals(statements.size)
			statements.get(0).assertEquals(((statements.get(1) as WritelnStatement).argument as IdExpression).value)
			"string1".assertEquals(((statements.get(2) as WritelnStatement).argument as StringLiteral).value)
			((statements.get(3) as WritelnStatement).argument as BooleanLiteral).value.assertTrue;
			((statements.get(4) as WritelnStatement).argument as BooleanLiteral).value.assertFalse
			2.assertEquals(((statements.get(5) as WritelnStatement).argument as IntegerLiteral).value)
			3.3.assertEquals(((statements.get(6) as WritelnStatement).argument as RealLiteral).value, 0)
			(((statements.get(7) as WritelnStatement).argument as NotExpression).operand as BooleanLiteral).value.assertTrue
			4.assertEquals((((statements.get(8) as WritelnStatement).argument as NegationExpression).operand as IntegerLiteral).value)
			5.assertEquals(((statements.get(9) as WritelnStatement).argument as IntegerLiteral).value)
		]
	}
	
	@Test
	def void testOperatorPrecedence() {
		'''
			program
				writeln(true and false or true and false)
				writeln(true xor false and true xor false)
				writeln(1 = 2 xor 3 <> 4)
				writeln(5 < 6 = 7 <= 8 <> 9 > 10 = 11 >= 12)
				writeln(13 + 14 < 15 - 16)
				writeln(17 + 18 <= 19 - 20)
				writeln(21 + 22 > 23 - 24)
				writeln(25 + 26 >= 27 - 28)
				writeln(29 * 30 + 31 div 32 - 33 mod 34)
				writeln(35.35 * 36.36 + 37.37 / 38.38 - 39.39)
				writeln(not true = not false <> not true)
				writeln(-40 * -41 div -42 mod -43)
				writeln(-44.44 * -45.45 / -46.46)
			end
		'''.parse => [
			assertNoIssues
			13.assertEquals(statements.size)
			(statements.get(0) as WritelnStatement).argument as OrExpression => [
				left as AndExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				right as AndExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
			]
			(statements.get(1) as WritelnStatement).argument as AndExpression => [
				left as XorExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse;
				]
				right as XorExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
			]
			(statements.get(2) as WritelnStatement).argument as XorExpression => [
				left as EqualityExpression => [
					1.assertEquals((left as IntegerLiteral).value)
					EqualityOperator.EQUALS.assertEquals(operator)
					2.assertEquals((right as IntegerLiteral).value)
				]
				right as EqualityExpression => [
					3.assertEquals((left as IntegerLiteral).value)
					EqualityOperator.NOT_EQUALS.assertEquals(operator)
					4.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(3) as WritelnStatement).argument as EqualityExpression => [
				left as EqualityExpression => [
					left as EqualityExpression => [
						left as ComparisonExpression => [
							5.assertEquals((left as IntegerLiteral).value)
							ComparisonOperator.LESS.assertEquals(operator)
							6.assertEquals((right as IntegerLiteral).value)
						]
						EqualityOperator.EQUALS.assertEquals(operator)
						right as ComparisonExpression => [
							7.assertEquals((left as IntegerLiteral).value)
							ComparisonOperator.LESS_EQUAL.assertEquals(operator)
							8.assertEquals((right as IntegerLiteral).value)
						]
					]
					EqualityOperator.NOT_EQUALS.assertEquals(operator)
					right as ComparisonExpression => [
						9.assertEquals((left as IntegerLiteral).value)
						ComparisonOperator.GREATER.assertEquals(operator)
						10.assertEquals((right as IntegerLiteral).value)
					]
				]
				EqualityOperator.EQUALS.assertEquals(operator)
				right as ComparisonExpression => [
					11.assertEquals((left as IntegerLiteral).value)
					ComparisonOperator.GREATER_EQUAL.assertEquals(operator)
					12.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(4) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					13.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					14.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.LESS.assertEquals(operator)
				right as AdditiveExpression => [
					15.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					16.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(5) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					17.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					18.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.LESS_EQUAL.assertEquals(operator)
				right as AdditiveExpression => [
					19.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					20.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(6) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					21.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					22.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.GREATER.assertEquals(operator)
				right as AdditiveExpression => [
					23.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					24.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(7) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					25.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					26.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.GREATER_EQUAL.assertEquals(operator)
				right as AdditiveExpression => [
					27.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					28.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(8) as WritelnStatement).argument as AdditiveExpression => [
				left as AdditiveExpression => [
					left as MultiplicativeExpression => [
						29.assertEquals((left as IntegerLiteral).value)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						30.assertEquals((right as IntegerLiteral).value)
					]
					AdditiveOperator.ADD.assertEquals(operator)
					right as MultiplicativeExpression => [
						31.assertEquals((left as IntegerLiteral).value)
						MultiplicativeOperator.INTEGER_DIVIDE.assertEquals(operator)
						32.assertEquals((right as IntegerLiteral).value)
					]
				]
				AdditiveOperator.SUBTRACT.assertEquals(operator)
				right as MultiplicativeExpression => [
					33.assertEquals((left as IntegerLiteral).value)
					MultiplicativeOperator.MODULUS.assertEquals(operator)
					34.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(9) as WritelnStatement).argument as AdditiveExpression => [
				left as AdditiveExpression => [
					left as MultiplicativeExpression => [
						35.35.assertEquals((left as RealLiteral).value, 0)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						36.36.assertEquals((right as RealLiteral).value, 0)
					]
					AdditiveOperator.ADD.assertEquals(operator)
					right as MultiplicativeExpression => [
						37.37.assertEquals((left as RealLiteral).value, 0)
						MultiplicativeOperator.REAL_DIVIDE.assertEquals(operator)
						38.38.assertEquals((right as RealLiteral).value, 0)
					]
				]
				AdditiveOperator.SUBTRACT.assertEquals(operator)
				39.39.assertEquals((right as RealLiteral).value, 0)
			]
			(statements.get(10) as WritelnStatement).argument as EqualityExpression => [
				left as EqualityExpression => [
					((left as NotExpression).operand as BooleanLiteral).value.assertTrue
					EqualityOperator.EQUALS.assertEquals(operator)
					((right as NotExpression).operand as BooleanLiteral).value.assertFalse
				]
				EqualityOperator.NOT_EQUALS.assertEquals(operator)
				((right as NotExpression).operand as BooleanLiteral).value.assertTrue
			]
			(statements.get(11) as WritelnStatement).argument as MultiplicativeExpression => [
				left as MultiplicativeExpression => [
					left as MultiplicativeExpression => [
						40.assertEquals(((left as NegationExpression).operand as IntegerLiteral).value)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						41.assertEquals(((right as NegationExpression).operand as IntegerLiteral).value)
					]
					MultiplicativeOperator.INTEGER_DIVIDE.assertEquals(operator)
					42.assertEquals(((right as NegationExpression).operand as IntegerLiteral).value)
				]
				MultiplicativeOperator.MODULUS.assertEquals(operator)
				43.assertEquals(((right as NegationExpression).operand as IntegerLiteral).value)
			]
			(statements.get(12) as WritelnStatement).argument as MultiplicativeExpression => [
				left as MultiplicativeExpression => [
					44.44.assertEquals(((left as NegationExpression).operand as RealLiteral).value, 0)
					MultiplicativeOperator.MULTIPLY.assertEquals(operator)
					45.45.assertEquals(((right as NegationExpression).operand as RealLiteral).value, 0)
				]
				MultiplicativeOperator.REAL_DIVIDE.assertEquals(operator)
				46.46.assertEquals(((right as NegationExpression).operand as RealLiteral).value, 0)
			]
		]
	}
}