/*
 * generated by Xtext 2.10.0
 */
package fire.tests

import com.google.inject.Inject
import fire.fire.AdditiveExpression
import fire.fire.AdditiveOperator
import fire.fire.AndExpression
import fire.fire.AssignmentStatement
import fire.fire.BooleanLiteral
import fire.fire.BuiltInType
import fire.fire.ComparisonExpression
import fire.fire.ComparisonOperator
import fire.fire.EqualityExpression
import fire.fire.EqualityOperator
import fire.fire.Function
import fire.fire.IdExpression
import fire.fire.IfExpression
import fire.fire.IfStatement
import fire.fire.IntegerLiteral
import fire.fire.MultiplicativeExpression
import fire.fire.MultiplicativeOperator
import fire.fire.NegationExpression
import fire.fire.NotExpression
import fire.fire.OrExpression
import fire.fire.Procedure
import fire.fire.Program
import fire.fire.RealLiteral
import fire.fire.StringLiteral
import fire.fire.VariableDeclaration
import fire.fire.WhileLoop
import fire.fire.WritelnStatement
import fire.fire.XorExpression
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.assertEquals
import static extension org.junit.Assert.assertFalse
import static extension org.junit.Assert.assertNull
import static extension org.junit.Assert.assertTrue

@RunWith(XtextRunner)
@InjectWith(FireInjectorProvider)
class FireParsingTest{
	@Inject
	extension ParseHelper<Program>
	@Inject
	extension ValidationTestHelper
	
	@Test
	def void testEmptyProgram() {
		'''
			program
			end
		'''.parse => [
			assertNoIssues
		]
	}
	
	@Test
	def void testProcedure() {
		'''
			program
				procedure proc1()
				end
				
				procedure proc2(param1: Boolean)
					writeln(param1)
				end
				
				procedure proc3(param2: Integer, param3: String, param4: Real)
					writeln(param2)
					writeln(param3)
					writeln(param4)
				end
			end
		'''.parse => [
			assertNoIssues
			3.assertEquals(callables.size)
			callables.get(0) as Procedure => [
				"proc1".assertEquals(name)
				parameters.empty.assertTrue
				statements.empty.assertTrue
			]
			callables.get(1) as Procedure => [
				"proc2".assertEquals(name)
				1.assertEquals(parameters.size)
				parameters.head => [
					"param1".assertEquals(name)
					BuiltInType.BOOLEAN.assertEquals(type)
				]
				1.assertEquals(statements.size)
				"param1".assertEquals(((statements.head as WritelnStatement).argument as IdExpression).value.name)
			]
			callables.get(2) as Procedure => [
				"proc3".assertEquals(name)
				3.assertEquals(parameters.size)
				parameters.get(0) => [
					"param2".assertEquals(name)
					BuiltInType.INTEGER.assertEquals(type)
				]
				parameters.get(1) => [
					"param3".assertEquals(name)
					BuiltInType.STRING.assertEquals(type)
				]
				parameters.get(2) => [
					"param4".assertEquals(name)
					BuiltInType.REAL.assertEquals(type)
				]
				3.assertEquals(statements.size)
				"param2".assertEquals(((statements.get(0) as WritelnStatement).argument as IdExpression).value.name)
				"param3".assertEquals(((statements.get(1) as WritelnStatement).argument as IdExpression).value.name)
				"param4".assertEquals(((statements.get(2) as WritelnStatement).argument as IdExpression).value.name)
			]
		]
	}
	
	@Test
	def void testFunction() {
		'''
			program
				function func1(): Integer
					1
				end
				
				function func2(param1: Real): Real
					writeln(param1)
					param1
				end
				
				function func3(param2: String, param3: Boolean, param4: Integer): Integer
					writeln(param2)
					writeln(param3)
					writeln(param4)
					param4
				end
			end
		'''.parse => [
			assertNoIssues
			3.assertEquals(callables.size)
			callables.get(0) as Function => [
				"func1".assertEquals(name)
				parameters.empty.assertTrue
				BuiltInType.INTEGER.assertEquals(returnType)
				statements.empty.assertTrue
				1.assertEquals((value as IntegerLiteral).value)
			]
			callables.get(1) as Function => [
				"func2".assertEquals(name)
				1.assertEquals(parameters.size)
				parameters.head => [
					"param1".assertEquals(name)
					BuiltInType.REAL.assertEquals(type)
				]
				BuiltInType.REAL.assertEquals(returnType)
				1.assertEquals(statements.size)
				"param1".assertEquals(((statements.head as WritelnStatement).argument as IdExpression).value.name)
				"param1".assertEquals((value as IdExpression).value.name)
			]
			callables.get(2) as Function => [
				"func3".assertEquals(name)
				3.assertEquals(parameters.size)
				parameters.get(0) => [
					"param2".assertEquals(name)
					BuiltInType.STRING.assertEquals(type)
				]
				parameters.get(1) => [
					"param3".assertEquals(name)
					BuiltInType.BOOLEAN.assertEquals(type)
				]
				parameters.get(2) => [
					"param4".assertEquals(name)
					BuiltInType.INTEGER.assertEquals(type)
				]
				BuiltInType.INTEGER.assertEquals(returnType)
				3.assertEquals(statements.size)
				"param2".assertEquals(((statements.get(0) as WritelnStatement).argument as IdExpression).value.name)
				"param3".assertEquals(((statements.get(1) as WritelnStatement).argument as IdExpression).value.name)
				"param4".assertEquals(((statements.get(2) as WritelnStatement).argument as IdExpression).value.name)
				"param4".assertEquals((value as IdExpression).value.name)
			]
		]
	}
	
	@Test
	def void testStatement() {
		'''
			program
				const c1: Integer := 1
				var v1: Integer := 2
				v1 := 3
				writeln("string1")
				writeln(c1 + v1)
			end
		'''.parse => [
			assertNoIssues
			5.assertEquals(statements.size)
			statements.get(0) as VariableDeclaration => [
				constant.assertTrue
				"c1".assertEquals(name)
				BuiltInType.INTEGER.assertEquals(type)
				1.assertEquals((value as IntegerLiteral).value)
			]
			statements.get(1) as VariableDeclaration => [
				constant.assertFalse
				"v1".assertEquals(name)
				BuiltInType.INTEGER.assertEquals(type)
				2.assertEquals((value as IntegerLiteral).value)
			]
			statements.get(2) as AssignmentStatement => [
				"v1".assertEquals(variable.name)
				3.assertEquals((value as IntegerLiteral).value)
			]
			"string1".assertEquals(((statements.get(3) as WritelnStatement).argument as StringLiteral).value)
			(statements.get(4) as WritelnStatement).argument as AdditiveExpression => [
				"c1".assertEquals((left as IdExpression).value.name)
				"v1".assertEquals((right as IdExpression).value.name)
			]
		]
	}
	
	@Test
	def void testWhileLoop() {
		'''
			program
				while true do
				end
				while true do
					writeln(1)
					writeln(2)
					writeln(3)
				end
				while true do
					while true do
						while true do
							writeln(4)
						end
					end
				end
			end
		'''.parse => [
			assertNoIssues
			3.assertEquals(statements.size)
			statements.get(0) as WhileLoop => [
				(condition as BooleanLiteral).value.assertTrue
				statements.empty.assertTrue
			]
			statements.get(1) as WhileLoop => [
				(condition as BooleanLiteral).value.assertTrue
				3.assertEquals(statements.size)
				1.assertEquals(((statements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
				2.assertEquals(((statements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
				3.assertEquals(((statements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
			]
			statements.get(2) as WhileLoop => [
				(condition as BooleanLiteral).value.assertTrue
				1.assertEquals(statements.size)
				statements.head as WhileLoop => [
					(condition as BooleanLiteral).value.assertTrue
					1.assertEquals(statements.size)
					statements.head as WhileLoop => [
						(condition as BooleanLiteral).value.assertTrue
						1.assertEquals(statements.size)
						4.assertEquals(((statements.head as WritelnStatement).argument as IntegerLiteral).value)
					]
				]
			]
		]
	}
	
	@Test
	def void testIfStatement() {
		'''
			program
				if true then
				end
				if true then
				else begin
				end
			end
		'''.parse => [
			assertNoIssues
			2.assertEquals(statements.size)
			statements.get(0) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				thenStatements.empty.assertTrue
				elseIfs.empty.assertTrue
				^else.assertNull
			]
			statements.get(1) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				thenStatements.empty.assertTrue
				elseIfs.empty.assertTrue
				^else.elseStatements.empty.assertTrue
			]
		]
		
		'''
			program
				if true then
					writeln(1)
					writeln(2)
					writeln(3)
				end
				if true then
					writeln(4)
					writeln(5)
					writeln(6)
				else begin
					writeln(7)
					writeln(8)
					writeln(9)
				end
			end
		'''.parse => [
			assertNoIssues
			2.assertEquals(statements.size)
			statements.get(0) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				3.assertEquals(thenStatements.size)
				1.assertEquals(((thenStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
				2.assertEquals(((thenStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
				3.assertEquals(((thenStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				elseIfs.empty.assertTrue
				^else.assertNull
			]
			statements.get(1) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				3.assertEquals(thenStatements.size)
				4.assertEquals(((thenStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
				5.assertEquals(((thenStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
				6.assertEquals(((thenStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				elseIfs.empty.assertTrue
				^else => [
					3.assertEquals(elseStatements.size)
					7.assertEquals(((elseStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
					8.assertEquals(((elseStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
					9.assertEquals(((elseStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				]
			]
		]
		
		'''
			program
				if true then
					if true then
						if true then
							writeln(10)
						end
					end
				end
				if true then
					if true then
						if true then
							writeln(11)
						else begin
							writeln(12)
						end
					else begin
						if true then
							writeln(13)
						else begin
							writeln(14)
						end
					end
				else begin
					if true then
						if true then
							writeln(15)
						else begin
							writeln(16)
						end
					else begin
						if true then
							writeln(17)
						else begin
							writeln(18)
						end
					end
				end
			end
		'''.parse => [
			assertNoIssues
			2.assertEquals(statements.size)
			statements.get(0) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				1.assertEquals(thenStatements.size)
				thenStatements.head as IfStatement => [
					(condition as BooleanLiteral).value.assertTrue
					1.assertEquals(thenStatements.size)
					thenStatements.head as IfStatement => [
						(condition as BooleanLiteral).value.assertTrue
						1.assertEquals(thenStatements.size)
						10.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
						elseIfs.empty.assertTrue
						^else.assertNull
					]
					elseIfs.empty.assertTrue
					^else.assertNull
				]
				elseIfs.empty.assertTrue
				^else.assertNull
			]
			statements.get(1) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				1.assertEquals(thenStatements.size)
				thenStatements.head as IfStatement => [
					(condition as BooleanLiteral).value.assertTrue
					1.assertEquals(thenStatements.size)
					thenStatements.head as IfStatement => [
						(condition as BooleanLiteral).value.assertTrue
						1.assertEquals(thenStatements.size)
						11.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
						elseIfs.empty.assertTrue
						^else => [
							1.assertEquals(elseStatements.size)
							12.assertEquals(((elseStatements.head as WritelnStatement).argument as IntegerLiteral).value)
						]
					]
					elseIfs.empty.assertTrue
					^else => [
						1.assertEquals(elseStatements.size)
						elseStatements.head as IfStatement => [
							(condition as BooleanLiteral).value.assertTrue
							1.assertEquals(thenStatements.size)
							13.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
							elseIfs.empty.assertTrue
							^else => [
								1.assertEquals(elseStatements.size)
								14.assertEquals(((elseStatements.head as WritelnStatement).argument as IntegerLiteral).value)
							]
						]
					]
				]
				elseIfs.empty.assertTrue
				^else => [
					1.assertEquals(elseStatements.size)
					elseStatements.head as IfStatement => [
						(condition as BooleanLiteral).value.assertTrue
						1.assertEquals(thenStatements.size)
						thenStatements.head as IfStatement => [
							(condition as BooleanLiteral).value.assertTrue
							1.assertEquals(thenStatements.size)
							15.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
							elseIfs.empty.assertTrue
							^else => [
								1.assertEquals(elseStatements.size)
								16.assertEquals(((elseStatements.head as WritelnStatement).argument as IntegerLiteral).value)
							]
						]
						elseIfs.empty.assertTrue
						^else => [
							1.assertEquals(elseStatements.size)
							elseStatements.head as IfStatement => [
								(condition as BooleanLiteral).value.assertTrue
								1.assertEquals(thenStatements.size)
								17.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
								elseIfs.empty.assertTrue
								^else => [
									1.assertEquals(elseStatements.size)
									18.assertEquals(((elseStatements.head as WritelnStatement).argument as IntegerLiteral).value)
								]
							]
						]
					]
				]
			]
		]
		
		'''
			program
				if true then
				else if true then
				else if true then
				else begin
				end
				if true then
					writeln(19)
				else if true then
					writeln(20)
				else if true then
					writeln(21)
				else begin
					writeln(22)
				end
				if true then
					writeln(23)
					writeln(24)
					writeln(25)
				else if true then
					writeln(26)
					writeln(27)
					writeln(28)
				else if true then
					writeln(29)
					writeln(30)
					writeln(31)
				else begin
					writeln(32)
					writeln(33)
					writeln(34)
				end
			end
		'''.parse => [
			assertNoIssues
			3.assertEquals(statements.size)
			statements.get(0) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				thenStatements.empty.assertTrue
				2.assertEquals(elseIfs.size)
				elseIfs.get(0).thenStatements.empty.assertTrue
				elseIfs.get(1).thenStatements.empty.assertTrue
				^else.elseStatements.empty.assertTrue
			]
			statements.get(1) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				1.assertEquals(thenStatements.size)
				19.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
				2.assertEquals(elseIfs.size)
				elseIfs.get(0) => [
					(condition as BooleanLiteral).value.assertTrue
					1.assertEquals(thenStatements.size)
					20.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
				]
				elseIfs.get(1) => [
					(condition as BooleanLiteral).value.assertTrue
					1.assertEquals(thenStatements.size)
					21.assertEquals(((thenStatements.head as WritelnStatement).argument as IntegerLiteral).value)
				]
				^else => [
					1.assertEquals(elseStatements.size)
					22.assertEquals(((elseStatements.head as WritelnStatement).argument as IntegerLiteral).value)
				]
			]
			statements.get(2) as IfStatement => [
				(condition as BooleanLiteral).value.assertTrue
				3.assertEquals(thenStatements.size)
				23.assertEquals(((thenStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
				24.assertEquals(((thenStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
				25.assertEquals(((thenStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				2.assertEquals(elseIfs.size)
				elseIfs.get(0) => [
					(condition as BooleanLiteral).value.assertTrue
					3.assertEquals(thenStatements.size)
					26.assertEquals(((thenStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
					27.assertEquals(((thenStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
					28.assertEquals(((thenStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				]
				elseIfs.get(1) => [
					(condition as BooleanLiteral).value.assertTrue
					3.assertEquals(thenStatements.size)
					29.assertEquals(((thenStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
					30.assertEquals(((thenStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
					31.assertEquals(((thenStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				]
				^else => [
					3.assertEquals(elseStatements.size)
					32.assertEquals(((elseStatements.get(0) as WritelnStatement).argument as IntegerLiteral).value)
					33.assertEquals(((elseStatements.get(1) as WritelnStatement).argument as IntegerLiteral).value)
					34.assertEquals(((elseStatements.get(2) as WritelnStatement).argument as IntegerLiteral).value)
				]
			]
		]
	}
	
	@Test
	def void testOrExpression() {
		'''
			program
				writeln(true or false or true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as OrExpression => [
				left as OrExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testAndExpression() {
		'''
			program
				writeln(true and false and true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as AndExpression => [
				left as AndExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testXorExpression() {
		'''
			program
				writeln(true xor false xor true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as XorExpression => [
				left as XorExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testEqualityExpression() {
		'''
			program
				writeln(1 = 2 <> true)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as EqualityExpression => [
				left as EqualityExpression => [
					1.assertEquals((left as IntegerLiteral).value)
					EqualityOperator.EQUALS.assertEquals(operator)
					2.assertEquals((right as IntegerLiteral).value)
				]
				EqualityOperator.NOT_EQUALS.assertEquals(operator)
				(right as BooleanLiteral).value.assertTrue
			]
		]
	}
	
	@Test
	def void testComparisonExpression() {
		'''
			program
				writeln(1 < 2)
				writeln(3 <= 4)
				writeln(5 > 6)
				writeln(7 >= 8)
			end
		'''.parse => [
			assertNoIssues
			4.assertEquals(statements.size)
			(statements.get(0) as WritelnStatement).argument as ComparisonExpression => [
				1.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.LESS.assertEquals(operator)
				2.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(1) as WritelnStatement).argument as ComparisonExpression => [
				3.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.LESS_EQUAL.assertEquals(operator)
				4.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(2) as WritelnStatement).argument as ComparisonExpression => [
				5.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.GREATER.assertEquals(operator)
				6.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(3) as WritelnStatement).argument as ComparisonExpression => [
				7.assertEquals((left as IntegerLiteral).value)
				ComparisonOperator.GREATER_EQUAL.assertEquals(operator)
				8.assertEquals((right as IntegerLiteral).value)
			]
		]
	}
	
	@Test
	def void testAdditiveExpression() {
		'''
			program
				writeln(1 + 2 - 3)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as AdditiveExpression => [
				left as AdditiveExpression => [
					1.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					2.assertEquals((right as IntegerLiteral).value)
				]
				AdditiveOperator.SUBTRACT.assertEquals(operator)
				3.assertEquals((right as IntegerLiteral).value)
			]
		]
	}
	
	@Test
	def void testMultiplicativeExpression() {
		'''
			program
				writeln(1 * 2 div 3 mod 4)
				writeln(5.5 / 6.6)
			end
		'''.parse => [
			assertNoIssues
			2.assertEquals(statements.size)
			(statements.get(0) as WritelnStatement).argument as MultiplicativeExpression => [
				left as MultiplicativeExpression => [
					left as MultiplicativeExpression => [
						1.assertEquals((left as IntegerLiteral).value)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						2.assertEquals((right as IntegerLiteral).value)
					]
					MultiplicativeOperator.INTEGER_DIVIDE.assertEquals(operator)
					3.assertEquals((right as IntegerLiteral).value)
				]
				MultiplicativeOperator.MODULUS.assertEquals(operator)
				4.assertEquals((right as IntegerLiteral).value)
			]
			(statements.get(1) as WritelnStatement).argument as MultiplicativeExpression => [
				5.5.assertEquals((left as RealLiteral).value, 0)
				MultiplicativeOperator.REAL_DIVIDE.assertEquals(operator)
				6.6.assertEquals((right as RealLiteral).value, 0)
			]
		]
	}
	
	@Test
	def void testTerminalExpression() {
		'''
			program
				const c1: Integer := 1
				writeln(c1)
				writeln("string1")
				writeln(true)
				writeln(false)
				writeln(2)
				writeln(3.3)
				writeln(not true)
				writeln(-4)
				writeln((5))
			end
		'''.parse => [
			assertNoIssues
			10.assertEquals(statements.size)
			statements.get(0).assertEquals(((statements.get(1) as WritelnStatement).argument as IdExpression).value)
			"string1".assertEquals(((statements.get(2) as WritelnStatement).argument as StringLiteral).value)
			((statements.get(3) as WritelnStatement).argument as BooleanLiteral).value.assertTrue;
			((statements.get(4) as WritelnStatement).argument as BooleanLiteral).value.assertFalse
			2.assertEquals(((statements.get(5) as WritelnStatement).argument as IntegerLiteral).value)
			3.3.assertEquals(((statements.get(6) as WritelnStatement).argument as RealLiteral).value, 0)
			(((statements.get(7) as WritelnStatement).argument as NotExpression).operand as BooleanLiteral).value.assertTrue
			4.assertEquals((((statements.get(8) as WritelnStatement).argument as NegationExpression).operand as IntegerLiteral).value)
			5.assertEquals(((statements.get(9) as WritelnStatement).argument as IntegerLiteral).value)
		]
	}
	
	@Test
	def void testOperatorPrecedence() {
		'''
			program
				writeln(true and false or true and false)
				writeln(true xor false and true xor false)
				writeln(1 = 2 xor 3 <> 4)
				writeln(5 < 6 = 7 <= 8 <> 9 > 10 = 11 >= 12)
				writeln(13 + 14 < 15 - 16)
				writeln(17 + 18 <= 19 - 20)
				writeln(21 + 22 > 23 - 24)
				writeln(25 + 26 >= 27 - 28)
				writeln(29 * 30 + 31 div 32 - 33 mod 34)
				writeln(35.35 * 36.36 + 37.37 / 38.38 - 39.39)
				writeln(not true = not false <> not true)
				writeln(-40 * -41 div -42 mod -43)
				writeln(-44.44 * -45.45 / -46.46)
			end
		'''.parse => [
			assertNoIssues
			13.assertEquals(statements.size)
			(statements.get(0) as WritelnStatement).argument as OrExpression => [
				left as AndExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
				right as AndExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
			]
			(statements.get(1) as WritelnStatement).argument as AndExpression => [
				left as XorExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse;
				]
				right as XorExpression => [
					(left as BooleanLiteral).value.assertTrue;
					(right as BooleanLiteral).value.assertFalse
				]
			]
			(statements.get(2) as WritelnStatement).argument as XorExpression => [
				left as EqualityExpression => [
					1.assertEquals((left as IntegerLiteral).value)
					EqualityOperator.EQUALS.assertEquals(operator)
					2.assertEquals((right as IntegerLiteral).value)
				]
				right as EqualityExpression => [
					3.assertEquals((left as IntegerLiteral).value)
					EqualityOperator.NOT_EQUALS.assertEquals(operator)
					4.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(3) as WritelnStatement).argument as EqualityExpression => [
				left as EqualityExpression => [
					left as EqualityExpression => [
						left as ComparisonExpression => [
							5.assertEquals((left as IntegerLiteral).value)
							ComparisonOperator.LESS.assertEquals(operator)
							6.assertEquals((right as IntegerLiteral).value)
						]
						EqualityOperator.EQUALS.assertEquals(operator)
						right as ComparisonExpression => [
							7.assertEquals((left as IntegerLiteral).value)
							ComparisonOperator.LESS_EQUAL.assertEquals(operator)
							8.assertEquals((right as IntegerLiteral).value)
						]
					]
					EqualityOperator.NOT_EQUALS.assertEquals(operator)
					right as ComparisonExpression => [
						9.assertEquals((left as IntegerLiteral).value)
						ComparisonOperator.GREATER.assertEquals(operator)
						10.assertEquals((right as IntegerLiteral).value)
					]
				]
				EqualityOperator.EQUALS.assertEquals(operator)
				right as ComparisonExpression => [
					11.assertEquals((left as IntegerLiteral).value)
					ComparisonOperator.GREATER_EQUAL.assertEquals(operator)
					12.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(4) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					13.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					14.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.LESS.assertEquals(operator)
				right as AdditiveExpression => [
					15.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					16.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(5) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					17.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					18.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.LESS_EQUAL.assertEquals(operator)
				right as AdditiveExpression => [
					19.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					20.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(6) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					21.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					22.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.GREATER.assertEquals(operator)
				right as AdditiveExpression => [
					23.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					24.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(7) as WritelnStatement).argument as ComparisonExpression => [
				left as AdditiveExpression => [
					25.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.ADD.assertEquals(operator)
					26.assertEquals((right as IntegerLiteral).value)
				]
				ComparisonOperator.GREATER_EQUAL.assertEquals(operator)
				right as AdditiveExpression => [
					27.assertEquals((left as IntegerLiteral).value)
					AdditiveOperator.SUBTRACT.assertEquals(operator)
					28.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(8) as WritelnStatement).argument as AdditiveExpression => [
				left as AdditiveExpression => [
					left as MultiplicativeExpression => [
						29.assertEquals((left as IntegerLiteral).value)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						30.assertEquals((right as IntegerLiteral).value)
					]
					AdditiveOperator.ADD.assertEquals(operator)
					right as MultiplicativeExpression => [
						31.assertEquals((left as IntegerLiteral).value)
						MultiplicativeOperator.INTEGER_DIVIDE.assertEquals(operator)
						32.assertEquals((right as IntegerLiteral).value)
					]
				]
				AdditiveOperator.SUBTRACT.assertEquals(operator)
				right as MultiplicativeExpression => [
					33.assertEquals((left as IntegerLiteral).value)
					MultiplicativeOperator.MODULUS.assertEquals(operator)
					34.assertEquals((right as IntegerLiteral).value)
				]
			]
			(statements.get(9) as WritelnStatement).argument as AdditiveExpression => [
				left as AdditiveExpression => [
					left as MultiplicativeExpression => [
						35.35.assertEquals((left as RealLiteral).value, 0)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						36.36.assertEquals((right as RealLiteral).value, 0)
					]
					AdditiveOperator.ADD.assertEquals(operator)
					right as MultiplicativeExpression => [
						37.37.assertEquals((left as RealLiteral).value, 0)
						MultiplicativeOperator.REAL_DIVIDE.assertEquals(operator)
						38.38.assertEquals((right as RealLiteral).value, 0)
					]
				]
				AdditiveOperator.SUBTRACT.assertEquals(operator)
				39.39.assertEquals((right as RealLiteral).value, 0)
			]
			(statements.get(10) as WritelnStatement).argument as EqualityExpression => [
				left as EqualityExpression => [
					((left as NotExpression).operand as BooleanLiteral).value.assertTrue
					EqualityOperator.EQUALS.assertEquals(operator)
					((right as NotExpression).operand as BooleanLiteral).value.assertFalse
				]
				EqualityOperator.NOT_EQUALS.assertEquals(operator)
				((right as NotExpression).operand as BooleanLiteral).value.assertTrue
			]
			(statements.get(11) as WritelnStatement).argument as MultiplicativeExpression => [
				left as MultiplicativeExpression => [
					left as MultiplicativeExpression => [
						40.assertEquals(((left as NegationExpression).operand as IntegerLiteral).value)
						MultiplicativeOperator.MULTIPLY.assertEquals(operator)
						41.assertEquals(((right as NegationExpression).operand as IntegerLiteral).value)
					]
					MultiplicativeOperator.INTEGER_DIVIDE.assertEquals(operator)
					42.assertEquals(((right as NegationExpression).operand as IntegerLiteral).value)
				]
				MultiplicativeOperator.MODULUS.assertEquals(operator)
				43.assertEquals(((right as NegationExpression).operand as IntegerLiteral).value)
			]
			(statements.get(12) as WritelnStatement).argument as MultiplicativeExpression => [
				left as MultiplicativeExpression => [
					44.44.assertEquals(((left as NegationExpression).operand as RealLiteral).value, 0)
					MultiplicativeOperator.MULTIPLY.assertEquals(operator)
					45.45.assertEquals(((right as NegationExpression).operand as RealLiteral).value, 0)
				]
				MultiplicativeOperator.REAL_DIVIDE.assertEquals(operator)
				46.46.assertEquals(((right as NegationExpression).operand as RealLiteral).value, 0)
			]
		]
	}
	
	@Test
	def void testIfExpression() {
		'''
			program
				writeln(if true then
					"if value"
				else begin
					"else value"
				end)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as IfExpression => [
				(condition as BooleanLiteral).value.assertTrue
				thenStatements.empty.assertTrue
				"if value".assertEquals((thenValue as StringLiteral).value)
				elseIfs.empty.assertTrue
				elseStatements.empty.assertTrue
				"else value".assertEquals((elseValue as StringLiteral).value)
			]
		]
		
		'''
			program
				writeln(if true then
					"if value"
				else if true then
					"else if value 0"
				else if true then
					"else if value 1"
				else if true then
					"else if value 2"
				else begin
					"else value"
				end)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as IfExpression => [
				(condition as BooleanLiteral).value.assertTrue
				thenStatements.empty.assertTrue
				"if value".assertEquals((thenValue as StringLiteral).value)
				3.assertEquals(elseIfs.size)
				elseIfs.get(0) => [
					(condition as BooleanLiteral).value.assertTrue
					thenStatements.empty.assertTrue
					"else if value 0".assertEquals((thenValue as StringLiteral).value)
				]
				elseIfs.get(1) => [
					(condition as BooleanLiteral).value.assertTrue
					thenStatements.empty.assertTrue
					"else if value 1".assertEquals((thenValue as StringLiteral).value)
				]
				elseIfs.get(2) => [
					(condition as BooleanLiteral).value.assertTrue
					thenStatements.empty.assertTrue
					"else if value 2".assertEquals((thenValue as StringLiteral).value)
				]
				elseStatements.empty.assertTrue
				"else value".assertEquals((elseValue as StringLiteral).value)
			]
		]
		
		'''
			program
				writeln(if true then
					writeln("if statement 0")
					writeln("if statement 1")
					writeln("if statement 2")
					"if value"
				else if true then
					writeln("else if statement 0")
					writeln("else if statement 1")
					writeln("else if statement 2")
					"else if value"
				else begin
					writeln("else statement 0")
					writeln("else statement 1")
					writeln("else statement 2")
					"else value"
				end)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as IfExpression => [
				(condition as BooleanLiteral).value.assertTrue
				3.assertEquals(thenStatements.size)
				"if statement 0".assertEquals(((thenStatements.get(0) as WritelnStatement).argument as StringLiteral).value)
				"if statement 1".assertEquals(((thenStatements.get(1) as WritelnStatement).argument as StringLiteral).value)
				"if statement 2".assertEquals(((thenStatements.get(2) as WritelnStatement).argument as StringLiteral).value)
				"if value".assertEquals((thenValue as StringLiteral).value)
				1.assertEquals(elseIfs.size)
				elseIfs.head => [
					(condition as BooleanLiteral).value.assertTrue
					3.assertEquals(thenStatements.size)
					"else if statement 0".assertEquals(((thenStatements.get(0) as WritelnStatement).argument as StringLiteral).value)
					"else if statement 1".assertEquals(((thenStatements.get(1) as WritelnStatement).argument as StringLiteral).value)
					"else if statement 2".assertEquals(((thenStatements.get(2) as WritelnStatement).argument as StringLiteral).value)
					"else if value".assertEquals((thenValue as StringLiteral).value)
				]
				3.assertEquals(elseStatements.size)
				"else statement 0".assertEquals(((elseStatements.get(0) as WritelnStatement).argument as StringLiteral).value)
				"else statement 1".assertEquals(((elseStatements.get(1) as WritelnStatement).argument as StringLiteral).value)
				"else statement 2".assertEquals(((elseStatements.get(2) as WritelnStatement).argument as StringLiteral).value)
				"else value".assertEquals((elseValue as StringLiteral).value)
			]
		]
		
		'''
			program
				writeln(if true then
					if true then
						"then -> then"
					else begin
						"then -> else"
					end
				else begin
					if true then
						"else -> then"
					else begin
						"else -> else"
					end
				end)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as IfExpression => [
				(condition as BooleanLiteral).value.assertTrue
				thenStatements.empty.assertTrue
				thenValue as IfExpression => [
					(condition as BooleanLiteral).value.assertTrue
					thenStatements.empty.assertTrue
					"then -> then".assertEquals((thenValue as StringLiteral).value)
					elseIfs.empty.assertTrue
					elseStatements.empty.assertTrue
					"then -> else".assertEquals((elseValue as StringLiteral).value)
				]
				elseIfs.empty.assertTrue
				elseStatements.empty.assertTrue
				elseValue as IfExpression => [
					(condition as BooleanLiteral).value.assertTrue
					thenStatements.empty.assertTrue
					"else -> then".assertEquals((thenValue as StringLiteral).value)
					elseIfs.empty.assertTrue
					elseStatements.empty.assertTrue
					"else -> else".assertEquals((elseValue as StringLiteral).value)
				]
			]
		]
		
		'''
			program
				writeln(if true then
					const c1: Integer := 0;
					-c1
				else begin
					var v1: Integer := 1
					v1 := 2;
					-v1
				end)
			end
		'''.parse => [
			assertNoIssues
			1.assertEquals(statements.size)
			(statements.head as WritelnStatement).argument as IfExpression => [
				(condition as BooleanLiteral).value.assertTrue
				1.assertEquals(thenStatements.size)
				thenStatements.head as VariableDeclaration => [
					constant.assertTrue
					"c1".assertEquals(name)
					BuiltInType.INTEGER.assertEquals(type)
					0.assertEquals((value as IntegerLiteral).value)
				]
				"c1".assertEquals(((thenValue as NegationExpression).operand as IdExpression).value.name)
				elseIfs.empty.assertTrue
				2.assertEquals(elseStatements.size)
				elseStatements.get(0) as VariableDeclaration => [
					constant.assertFalse
					"v1".assertEquals(name)
					BuiltInType.INTEGER.assertEquals(type)
					1.assertEquals((value as IntegerLiteral).value)
				]
				elseStatements.get(1) as AssignmentStatement => [
					"v1".assertEquals(variable.name)
					2.assertEquals((value as IntegerLiteral).value)
				]
				"v1".assertEquals(((elseValue as NegationExpression).operand as IdExpression).value.name)
			]
		]
	}
}