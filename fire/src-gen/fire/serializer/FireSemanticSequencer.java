/*
 * generated by Xtext 2.10.0
 */
package fire.serializer;

import com.google.inject.Inject;
import fire.fire.AdditiveExpression;
import fire.fire.AndExpression;
import fire.fire.AssignmentStatement;
import fire.fire.BooleanLiteral;
import fire.fire.ComparisonExpression;
import fire.fire.ElseIfExpression;
import fire.fire.ElseIfStatement;
import fire.fire.ElseStatement;
import fire.fire.EqualityExpression;
import fire.fire.FirePackage;
import fire.fire.IdExpression;
import fire.fire.IfExpression;
import fire.fire.IfStatement;
import fire.fire.IntegerLiteral;
import fire.fire.MultiplicativeExpression;
import fire.fire.NegationExpression;
import fire.fire.NotExpression;
import fire.fire.OrExpression;
import fire.fire.Program;
import fire.fire.RealLiteral;
import fire.fire.StringLiteral;
import fire.fire.VariableDeclaration;
import fire.fire.WhileLoop;
import fire.fire.WritelnStatement;
import fire.fire.XorExpression;
import fire.services.FireGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FireSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FireGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FirePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FirePackage.ADDITIVE_EXPRESSION:
				sequence_AdditiveExpression(context, (AdditiveExpression) semanticObject); 
				return; 
			case FirePackage.AND_EXPRESSION:
				sequence_AndExpression(context, (AndExpression) semanticObject); 
				return; 
			case FirePackage.ASSIGNMENT_STATEMENT:
				sequence_Statement(context, (AssignmentStatement) semanticObject); 
				return; 
			case FirePackage.BOOLEAN_LITERAL:
				sequence_TerminalExpression(context, (BooleanLiteral) semanticObject); 
				return; 
			case FirePackage.COMPARISON_EXPRESSION:
				sequence_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
				return; 
			case FirePackage.ELSE_IF_EXPRESSION:
				sequence_ElseIfExpression(context, (ElseIfExpression) semanticObject); 
				return; 
			case FirePackage.ELSE_IF_STATEMENT:
				sequence_ElseIfStatement(context, (ElseIfStatement) semanticObject); 
				return; 
			case FirePackage.ELSE_STATEMENT:
				sequence_ElseStatement(context, (ElseStatement) semanticObject); 
				return; 
			case FirePackage.EQUALITY_EXPRESSION:
				sequence_EqualityExpression(context, (EqualityExpression) semanticObject); 
				return; 
			case FirePackage.ID_EXPRESSION:
				sequence_TerminalExpression(context, (IdExpression) semanticObject); 
				return; 
			case FirePackage.IF_EXPRESSION:
				sequence_IfExpression(context, (IfExpression) semanticObject); 
				return; 
			case FirePackage.IF_STATEMENT:
				sequence_IfStatement(context, (IfStatement) semanticObject); 
				return; 
			case FirePackage.INTEGER_LITERAL:
				sequence_TerminalExpression(context, (IntegerLiteral) semanticObject); 
				return; 
			case FirePackage.MULTIPLICATIVE_EXPRESSION:
				sequence_MultiplicativeExpression(context, (MultiplicativeExpression) semanticObject); 
				return; 
			case FirePackage.NEGATION_EXPRESSION:
				sequence_TerminalExpression(context, (NegationExpression) semanticObject); 
				return; 
			case FirePackage.NOT_EXPRESSION:
				sequence_TerminalExpression(context, (NotExpression) semanticObject); 
				return; 
			case FirePackage.OR_EXPRESSION:
				sequence_Expression(context, (OrExpression) semanticObject); 
				return; 
			case FirePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case FirePackage.REAL_LITERAL:
				sequence_TerminalExpression(context, (RealLiteral) semanticObject); 
				return; 
			case FirePackage.STRING_LITERAL:
				sequence_TerminalExpression(context, (StringLiteral) semanticObject); 
				return; 
			case FirePackage.VARIABLE_DECLARATION:
				sequence_Statement(context, (VariableDeclaration) semanticObject); 
				return; 
			case FirePackage.WHILE_LOOP:
				sequence_WhileLoop(context, (WhileLoop) semanticObject); 
				return; 
			case FirePackage.WRITELN_STATEMENT:
				sequence_Statement(context, (WritelnStatement) semanticObject); 
				return; 
			case FirePackage.XOR_EXPRESSION:
				sequence_XorExpression(context, (XorExpression) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns AdditiveExpression
	 *     Expression.OrExpression_1_0 returns AdditiveExpression
	 *     AndExpression returns AdditiveExpression
	 *     AndExpression.AndExpression_1_0 returns AdditiveExpression
	 *     XorExpression returns AdditiveExpression
	 *     XorExpression.XorExpression_1_0 returns AdditiveExpression
	 *     EqualityExpression returns AdditiveExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns AdditiveExpression
	 *     ComparisonExpression returns AdditiveExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns AdditiveExpression
	 *     AdditiveExpression returns AdditiveExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns AdditiveExpression
	 *     MultiplicativeExpression returns AdditiveExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns AdditiveExpression
	 *     TerminalExpression returns AdditiveExpression
	 *
	 * Constraint:
	 *     (left=AdditiveExpression_AdditiveExpression_1_0_0_0 operator=AdditiveOperator right=MultiplicativeExpression)
	 */
	protected void sequence_AdditiveExpression(ISerializationContext context, AdditiveExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.ADDITIVE_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.ADDITIVE_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.ADDITIVE_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.ADDITIVE_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.ADDITIVE_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.ADDITIVE_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns AndExpression
	 *     Expression.OrExpression_1_0 returns AndExpression
	 *     AndExpression returns AndExpression
	 *     AndExpression.AndExpression_1_0 returns AndExpression
	 *     XorExpression returns AndExpression
	 *     XorExpression.XorExpression_1_0 returns AndExpression
	 *     EqualityExpression returns AndExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns AndExpression
	 *     ComparisonExpression returns AndExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns AndExpression
	 *     AdditiveExpression returns AndExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns AndExpression
	 *     MultiplicativeExpression returns AndExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns AndExpression
	 *     TerminalExpression returns AndExpression
	 *
	 * Constraint:
	 *     (left=AndExpression_AndExpression_1_0 right=XorExpression)
	 */
	protected void sequence_AndExpression(ISerializationContext context, AndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.AND_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.AND_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.AND_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.AND_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ComparisonExpression
	 *     Expression.OrExpression_1_0 returns ComparisonExpression
	 *     AndExpression returns ComparisonExpression
	 *     AndExpression.AndExpression_1_0 returns ComparisonExpression
	 *     XorExpression returns ComparisonExpression
	 *     XorExpression.XorExpression_1_0 returns ComparisonExpression
	 *     EqualityExpression returns ComparisonExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns ComparisonExpression
	 *     ComparisonExpression returns ComparisonExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns ComparisonExpression
	 *     AdditiveExpression returns ComparisonExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns ComparisonExpression
	 *     MultiplicativeExpression returns ComparisonExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns ComparisonExpression
	 *     TerminalExpression returns ComparisonExpression
	 *
	 * Constraint:
	 *     (left=ComparisonExpression_ComparisonExpression_1_0 operator=ComparisonOperator right=AdditiveExpression)
	 */
	protected void sequence_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.COMPARISON_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.COMPARISON_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.COMPARISON_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.COMPARISON_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.COMPARISON_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.COMPARISON_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElseIfExpression returns ElseIfExpression
	 *
	 * Constraint:
	 *     (condition=Expression thenStatements+=Statement* thenValue=Expression)
	 */
	protected void sequence_ElseIfExpression(ISerializationContext context, ElseIfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElseIfStatement returns ElseIfStatement
	 *
	 * Constraint:
	 *     (condition=Expression thenStatements+=Statement*)
	 */
	protected void sequence_ElseIfStatement(ISerializationContext context, ElseIfStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElseStatement returns ElseStatement
	 *
	 * Constraint:
	 *     elseStatements+=Statement*
	 */
	protected void sequence_ElseStatement(ISerializationContext context, ElseStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns EqualityExpression
	 *     Expression.OrExpression_1_0 returns EqualityExpression
	 *     AndExpression returns EqualityExpression
	 *     AndExpression.AndExpression_1_0 returns EqualityExpression
	 *     XorExpression returns EqualityExpression
	 *     XorExpression.XorExpression_1_0 returns EqualityExpression
	 *     EqualityExpression returns EqualityExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns EqualityExpression
	 *     ComparisonExpression returns EqualityExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns EqualityExpression
	 *     AdditiveExpression returns EqualityExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns EqualityExpression
	 *     MultiplicativeExpression returns EqualityExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns EqualityExpression
	 *     TerminalExpression returns EqualityExpression
	 *
	 * Constraint:
	 *     (left=EqualityExpression_EqualityExpression_1_0 operator=EqualityOperator right=ComparisonExpression)
	 */
	protected void sequence_EqualityExpression(ISerializationContext context, EqualityExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.EQUALITY_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.EQUALITY_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.EQUALITY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.EQUALITY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.EQUALITY_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.EQUALITY_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getEqualityExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OrExpression
	 *     Expression.OrExpression_1_0 returns OrExpression
	 *     AndExpression returns OrExpression
	 *     AndExpression.AndExpression_1_0 returns OrExpression
	 *     XorExpression returns OrExpression
	 *     XorExpression.XorExpression_1_0 returns OrExpression
	 *     EqualityExpression returns OrExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns OrExpression
	 *     ComparisonExpression returns OrExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns OrExpression
	 *     AdditiveExpression returns OrExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns OrExpression
	 *     MultiplicativeExpression returns OrExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns OrExpression
	 *     TerminalExpression returns OrExpression
	 *
	 * Constraint:
	 *     (left=Expression_OrExpression_1_0 right=AndExpression)
	 */
	protected void sequence_Expression(ISerializationContext context, OrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.OR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.OR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.OR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.OR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getOrExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IfExpression
	 *     Expression.OrExpression_1_0 returns IfExpression
	 *     AndExpression returns IfExpression
	 *     AndExpression.AndExpression_1_0 returns IfExpression
	 *     XorExpression returns IfExpression
	 *     XorExpression.XorExpression_1_0 returns IfExpression
	 *     EqualityExpression returns IfExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns IfExpression
	 *     ComparisonExpression returns IfExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns IfExpression
	 *     AdditiveExpression returns IfExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns IfExpression
	 *     MultiplicativeExpression returns IfExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns IfExpression
	 *     TerminalExpression returns IfExpression
	 *     IfExpression returns IfExpression
	 *
	 * Constraint:
	 *     (
	 *         condition=Expression 
	 *         thenStatements+=Statement* 
	 *         thenValue=Expression 
	 *         elseIfs+=ElseIfExpression* 
	 *         elseStatements+=Statement* 
	 *         elseValue=Expression
	 *     )
	 */
	protected void sequence_IfExpression(ISerializationContext context, IfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IfStatement
	 *     IfStatement returns IfStatement
	 *
	 * Constraint:
	 *     (condition=Expression thenStatements+=Statement* elseIfs+=ElseIfStatement* else=ElseStatement?)
	 */
	protected void sequence_IfStatement(ISerializationContext context, IfStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MultiplicativeExpression
	 *     Expression.OrExpression_1_0 returns MultiplicativeExpression
	 *     AndExpression returns MultiplicativeExpression
	 *     AndExpression.AndExpression_1_0 returns MultiplicativeExpression
	 *     XorExpression returns MultiplicativeExpression
	 *     XorExpression.XorExpression_1_0 returns MultiplicativeExpression
	 *     EqualityExpression returns MultiplicativeExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns MultiplicativeExpression
	 *     ComparisonExpression returns MultiplicativeExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns MultiplicativeExpression
	 *     AdditiveExpression returns MultiplicativeExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns MultiplicativeExpression
	 *     MultiplicativeExpression returns MultiplicativeExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns MultiplicativeExpression
	 *     TerminalExpression returns MultiplicativeExpression
	 *
	 * Constraint:
	 *     (left=MultiplicativeExpression_MultiplicativeExpression_1_0 operator=MultiplicativeOperator right=TerminalExpression)
	 */
	protected void sequence_MultiplicativeExpression(ISerializationContext context, MultiplicativeExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.MULTIPLICATIVE_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.MULTIPLICATIVE_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.MULTIPLICATIVE_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.MULTIPLICATIVE_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.MULTIPLICATIVE_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.MULTIPLICATIVE_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMultiplicativeExpressionAccess().getRightTerminalExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     statements+=Statement*
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns AssignmentStatement
	 *
	 * Constraint:
	 *     (variable=[VariableDeclaration|ID] value=Expression)
	 */
	protected void sequence_Statement(ISerializationContext context, AssignmentStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.ASSIGNMENT_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.ASSIGNMENT_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatementAccess().getVariableVariableDeclarationIDTerminalRuleCall_1_1_0_1(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getStatementAccess().getValueExpressionParserRuleCall_1_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns VariableDeclaration
	 *
	 * Constraint:
	 *     (constant?='const'? name=ID type=BuiltInType value=Expression)
	 */
	protected void sequence_Statement(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns WritelnStatement
	 *
	 * Constraint:
	 *     argument=Expression
	 */
	protected void sequence_Statement(ISerializationContext context, WritelnStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.WRITELN_STATEMENT__ARGUMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.WRITELN_STATEMENT__ARGUMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatementAccess().getArgumentExpressionParserRuleCall_4_3_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanLiteral
	 *     Expression.OrExpression_1_0 returns BooleanLiteral
	 *     AndExpression returns BooleanLiteral
	 *     AndExpression.AndExpression_1_0 returns BooleanLiteral
	 *     XorExpression returns BooleanLiteral
	 *     XorExpression.XorExpression_1_0 returns BooleanLiteral
	 *     EqualityExpression returns BooleanLiteral
	 *     EqualityExpression.EqualityExpression_1_0 returns BooleanLiteral
	 *     ComparisonExpression returns BooleanLiteral
	 *     ComparisonExpression.ComparisonExpression_1_0 returns BooleanLiteral
	 *     AdditiveExpression returns BooleanLiteral
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns BooleanLiteral
	 *     MultiplicativeExpression returns BooleanLiteral
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns BooleanLiteral
	 *     TerminalExpression returns BooleanLiteral
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, BooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IdExpression
	 *     Expression.OrExpression_1_0 returns IdExpression
	 *     AndExpression returns IdExpression
	 *     AndExpression.AndExpression_1_0 returns IdExpression
	 *     XorExpression returns IdExpression
	 *     XorExpression.XorExpression_1_0 returns IdExpression
	 *     EqualityExpression returns IdExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns IdExpression
	 *     ComparisonExpression returns IdExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns IdExpression
	 *     AdditiveExpression returns IdExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns IdExpression
	 *     MultiplicativeExpression returns IdExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns IdExpression
	 *     TerminalExpression returns IdExpression
	 *
	 * Constraint:
	 *     value=[VariableDeclaration|ID]
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, IdExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.ID_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.ID_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getValueVariableDeclarationIDTerminalRuleCall_0_1_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntegerLiteral
	 *     Expression.OrExpression_1_0 returns IntegerLiteral
	 *     AndExpression returns IntegerLiteral
	 *     AndExpression.AndExpression_1_0 returns IntegerLiteral
	 *     XorExpression returns IntegerLiteral
	 *     XorExpression.XorExpression_1_0 returns IntegerLiteral
	 *     EqualityExpression returns IntegerLiteral
	 *     EqualityExpression.EqualityExpression_1_0 returns IntegerLiteral
	 *     ComparisonExpression returns IntegerLiteral
	 *     ComparisonExpression.ComparisonExpression_1_0 returns IntegerLiteral
	 *     AdditiveExpression returns IntegerLiteral
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns IntegerLiteral
	 *     MultiplicativeExpression returns IntegerLiteral
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns IntegerLiteral
	 *     TerminalExpression returns IntegerLiteral
	 *
	 * Constraint:
	 *     value=Long
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, IntegerLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.INTEGER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.INTEGER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getValueLongParserRuleCall_3_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NegationExpression
	 *     Expression.OrExpression_1_0 returns NegationExpression
	 *     AndExpression returns NegationExpression
	 *     AndExpression.AndExpression_1_0 returns NegationExpression
	 *     XorExpression returns NegationExpression
	 *     XorExpression.XorExpression_1_0 returns NegationExpression
	 *     EqualityExpression returns NegationExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns NegationExpression
	 *     ComparisonExpression returns NegationExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns NegationExpression
	 *     AdditiveExpression returns NegationExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns NegationExpression
	 *     MultiplicativeExpression returns NegationExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns NegationExpression
	 *     TerminalExpression returns NegationExpression
	 *
	 * Constraint:
	 *     operand=TerminalExpression
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, NegationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.NEGATION_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.NEGATION_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getOperandTerminalExpressionParserRuleCall_6_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NotExpression
	 *     Expression.OrExpression_1_0 returns NotExpression
	 *     AndExpression returns NotExpression
	 *     AndExpression.AndExpression_1_0 returns NotExpression
	 *     XorExpression returns NotExpression
	 *     XorExpression.XorExpression_1_0 returns NotExpression
	 *     EqualityExpression returns NotExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns NotExpression
	 *     ComparisonExpression returns NotExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns NotExpression
	 *     AdditiveExpression returns NotExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns NotExpression
	 *     MultiplicativeExpression returns NotExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns NotExpression
	 *     TerminalExpression returns NotExpression
	 *
	 * Constraint:
	 *     operand=TerminalExpression
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, NotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.NOT_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.NOT_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getOperandTerminalExpressionParserRuleCall_5_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns RealLiteral
	 *     Expression.OrExpression_1_0 returns RealLiteral
	 *     AndExpression returns RealLiteral
	 *     AndExpression.AndExpression_1_0 returns RealLiteral
	 *     XorExpression returns RealLiteral
	 *     XorExpression.XorExpression_1_0 returns RealLiteral
	 *     EqualityExpression returns RealLiteral
	 *     EqualityExpression.EqualityExpression_1_0 returns RealLiteral
	 *     ComparisonExpression returns RealLiteral
	 *     ComparisonExpression.ComparisonExpression_1_0 returns RealLiteral
	 *     AdditiveExpression returns RealLiteral
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns RealLiteral
	 *     MultiplicativeExpression returns RealLiteral
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns RealLiteral
	 *     TerminalExpression returns RealLiteral
	 *
	 * Constraint:
	 *     value=Double
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, RealLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.REAL_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.REAL_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getValueDoubleParserRuleCall_4_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StringLiteral
	 *     Expression.OrExpression_1_0 returns StringLiteral
	 *     AndExpression returns StringLiteral
	 *     AndExpression.AndExpression_1_0 returns StringLiteral
	 *     XorExpression returns StringLiteral
	 *     XorExpression.XorExpression_1_0 returns StringLiteral
	 *     EqualityExpression returns StringLiteral
	 *     EqualityExpression.EqualityExpression_1_0 returns StringLiteral
	 *     ComparisonExpression returns StringLiteral
	 *     ComparisonExpression.ComparisonExpression_1_0 returns StringLiteral
	 *     AdditiveExpression returns StringLiteral
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns StringLiteral
	 *     MultiplicativeExpression returns StringLiteral
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns StringLiteral
	 *     TerminalExpression returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_TerminalExpression(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns WhileLoop
	 *     WhileLoop returns WhileLoop
	 *
	 * Constraint:
	 *     (condition=Expression statements+=Statement*)
	 */
	protected void sequence_WhileLoop(ISerializationContext context, WhileLoop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns XorExpression
	 *     Expression.OrExpression_1_0 returns XorExpression
	 *     AndExpression returns XorExpression
	 *     AndExpression.AndExpression_1_0 returns XorExpression
	 *     XorExpression returns XorExpression
	 *     XorExpression.XorExpression_1_0 returns XorExpression
	 *     EqualityExpression returns XorExpression
	 *     EqualityExpression.EqualityExpression_1_0 returns XorExpression
	 *     ComparisonExpression returns XorExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns XorExpression
	 *     AdditiveExpression returns XorExpression
	 *     AdditiveExpression.AdditiveExpression_1_0_0_0 returns XorExpression
	 *     MultiplicativeExpression returns XorExpression
	 *     MultiplicativeExpression.MultiplicativeExpression_1_0 returns XorExpression
	 *     TerminalExpression returns XorExpression
	 *
	 * Constraint:
	 *     (left=XorExpression_XorExpression_1_0 right=EqualityExpression)
	 */
	protected void sequence_XorExpression(ISerializationContext context, XorExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.XOR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.XOR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, FirePackage.Literals.XOR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirePackage.Literals.XOR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getXorExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
}
