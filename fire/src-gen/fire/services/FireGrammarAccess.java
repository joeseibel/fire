/*
 * generated by Xtext 2.12.0
 */
package fire.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FireGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallablesCallableParserRuleCall_2_0 = (RuleCall)cCallablesAssignment_2.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//	{Program}
		//	'program'
		//	callables+=Callable*
		//	statements+=Statement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'program' callables+=Callable* statements+=Statement* 'end'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//callables+=Callable*
		public Assignment getCallablesAssignment_2() { return cCallablesAssignment_2; }
		
		//Callable
		public RuleCall getCallablesCallableParserRuleCall_2_0() { return cCallablesCallableParserRuleCall_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class CallableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Callable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Callable:
		//	Procedure | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//Procedure | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Procedure
		public RuleCall getProcedureParserRuleCall_0() { return cProcedureParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Procedure:
		//	'procedure' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//	statements+=Statement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'procedure' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' statements+=Statement* 'end'
		public Group getGroup() { return cGroup; }
		
		//'procedure'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeBuiltInTypeEnumRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		private final Assignment cStatementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementsStatementParserRuleCall_7_0 = (RuleCall)cStatementsAssignment_7.eContents().get(0);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueExpressionParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Function:
		//	'function' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=BuiltInType
		//	=> statements+=Statement*
		//	value=Expression
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=BuiltInType =>
		//statements+=Statement* value=Expression 'end'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//returnType=BuiltInType
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//BuiltInType
		public RuleCall getReturnTypeBuiltInTypeEnumRuleCall_6_0() { return cReturnTypeBuiltInTypeEnumRuleCall_6_0; }
		
		//=> statements+=Statement*
		public Assignment getStatementsAssignment_7() { return cStatementsAssignment_7; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_7_0() { return cStatementsStatementParserRuleCall_7_0; }
		
		//value=Expression
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_8_0() { return cValueExpressionParserRuleCall_8_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class IdElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.IdElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Unused rule is here to create common super type for Parameter and VariableDeclaration
		//IdElement:
		//	Parameter | VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBuiltInTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ID ':' type=BuiltInType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=BuiltInType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=BuiltInType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BuiltInType
		public RuleCall getTypeBuiltInTypeEnumRuleCall_2_0() { return cTypeBuiltInTypeEnumRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAssignmentStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariableIdElementCrossReference_1_1_0 = (CrossReference)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cVariableIdElementIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariableIdElementCrossReference_1_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cWhileLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCallStatementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cCallableAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cCallableCallableCrossReference_4_1_0 = (CrossReference)cCallableAssignment_4_1.eContents().get(0);
		private final RuleCall cCallableCallableIDTerminalRuleCall_4_1_0_1 = (RuleCall)cCallableCallableCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cArgumentsAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_3_0_0 = (RuleCall)cArgumentsAssignment_4_3_0.eContents().get(0);
		private final Group cGroup_4_3_1 = (Group)cGroup_4_3.eContents().get(1);
		private final Keyword cCommaKeyword_4_3_1_0 = (Keyword)cGroup_4_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_3_1_1 = (Assignment)cGroup_4_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_3_1_1_0 = (RuleCall)cArgumentsAssignment_4_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cWritelnStatementAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cWritelnKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cArgumentAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cArgumentExpressionParserRuleCall_5_3_0 = (RuleCall)cArgumentAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cSemicolonKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		
		//Statement:
		//	VariableDeclaration | {AssignmentStatement} variable=[IdElement] ':=' value=Expression ';'? | WhileLoop | IfStatement
		//	| {CallStatement} callable=[Callable] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';'? |
		//	{WritelnStatement} 'writeln' '(' argument=Expression ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | {AssignmentStatement} variable=[IdElement] ':=' value=Expression ';'? | WhileLoop | IfStatement |
		//{CallStatement} callable=[Callable] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';'? |
		//{WritelnStatement} 'writeln' '(' argument=Expression ')' ';'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//{AssignmentStatement} variable=[IdElement] ':=' value=Expression ';'?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AssignmentStatement}
		public Action getAssignmentStatementAction_1_0() { return cAssignmentStatementAction_1_0; }
		
		//variable=[IdElement]
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//[IdElement]
		public CrossReference getVariableIdElementCrossReference_1_1_0() { return cVariableIdElementCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVariableIdElementIDTerminalRuleCall_1_1_0_1() { return cVariableIdElementIDTerminalRuleCall_1_1_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }
		
		//value=Expression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_3_0() { return cValueExpressionParserRuleCall_1_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_2() { return cWhileLoopParserRuleCall_2; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_3() { return cIfStatementParserRuleCall_3; }
		
		//{CallStatement} callable=[Callable] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';'?
		public Group getGroup_4() { return cGroup_4; }
		
		//{CallStatement}
		public Action getCallStatementAction_4_0() { return cCallStatementAction_4_0; }
		
		//callable=[Callable]
		public Assignment getCallableAssignment_4_1() { return cCallableAssignment_4_1; }
		
		//[Callable]
		public CrossReference getCallableCallableCrossReference_4_1_0() { return cCallableCallableCrossReference_4_1_0; }
		
		//ID
		public RuleCall getCallableCallableIDTerminalRuleCall_4_1_0_1() { return cCallableCallableIDTerminalRuleCall_4_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_3_0() { return cArgumentsAssignment_4_3_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_3_0_0() { return cArgumentsExpressionParserRuleCall_4_3_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_4_3_1() { return cGroup_4_3_1; }
		
		//','
		public Keyword getCommaKeyword_4_3_1_0() { return cCommaKeyword_4_3_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_3_1_1() { return cArgumentsAssignment_4_3_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_3_1_1_0() { return cArgumentsExpressionParserRuleCall_4_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//';'?
		public Keyword getSemicolonKeyword_4_5() { return cSemicolonKeyword_4_5; }
		
		//{WritelnStatement} 'writeln' '(' argument=Expression ')' ';'?
		public Group getGroup_5() { return cGroup_5; }
		
		//{WritelnStatement}
		public Action getWritelnStatementAction_5_0() { return cWritelnStatementAction_5_0; }
		
		//'writeln'
		public Keyword getWritelnKeyword_5_1() { return cWritelnKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//argument=Expression
		public Assignment getArgumentAssignment_5_3() { return cArgumentAssignment_5_3; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_5_3_0() { return cArgumentExpressionParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//';'?
		public Keyword getSemicolonKeyword_5_5() { return cSemicolonKeyword_5_5; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cConstantConstKeyword_0_0_0 = (Keyword)cConstantAssignment_0_0.eContents().get(0);
		private final Keyword cVarKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeBuiltInTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VariableDeclaration:
		//	(constant?='const' | 'var') name=ID ':' type=BuiltInType ':=' value=Expression ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(constant?='const' | 'var') name=ID ':' type=BuiltInType ':=' value=Expression ';'?
		public Group getGroup() { return cGroup; }
		
		//constant?='const' | 'var'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//constant?='const'
		public Assignment getConstantAssignment_0_0() { return cConstantAssignment_0_0; }
		
		//'const'
		public Keyword getConstantConstKeyword_0_0_0() { return cConstantConstKeyword_0_0_0; }
		
		//'var'
		public Keyword getVarKeyword_0_1() { return cVarKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=BuiltInType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//BuiltInType
		public RuleCall getTypeBuiltInTypeEnumRuleCall_3_0() { return cTypeBuiltInTypeEnumRuleCall_3_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }
		
		//value=Expression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_5_0() { return cValueExpressionParserRuleCall_5_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileLoop:
		//	'while' condition=Expression 'do'
		//	statements+=Statement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=Expression 'do' statements+=Statement* 'end'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementsStatementParserRuleCall_3_0 = (RuleCall)cThenStatementsAssignment_3.eContents().get(0);
		private final Assignment cElseIfsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseIfsElseIfStatementParserRuleCall_4_0 = (RuleCall)cElseIfsAssignment_4.eContents().get(0);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseElseStatementParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement:
		//	'if' condition=Expression 'then'
		//	thenStatements+=Statement*
		//	elseIfs+=ElseIfStatement*
		//	else=ElseStatement?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression 'then' thenStatements+=Statement* elseIfs+=ElseIfStatement* else=ElseStatement? 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenStatements+=Statement*
		public Assignment getThenStatementsAssignment_3() { return cThenStatementsAssignment_3; }
		
		//Statement
		public RuleCall getThenStatementsStatementParserRuleCall_3_0() { return cThenStatementsStatementParserRuleCall_3_0; }
		
		//elseIfs+=ElseIfStatement*
		public Assignment getElseIfsAssignment_4() { return cElseIfsAssignment_4; }
		
		//ElseIfStatement
		public RuleCall getElseIfsElseIfStatementParserRuleCall_4_0() { return cElseIfsElseIfStatementParserRuleCall_4_0; }
		
		//else=ElseStatement?
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }
		
		//ElseStatement
		public RuleCall getElseElseStatementParserRuleCall_5_0() { return cElseElseStatementParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class ElseIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.ElseIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementsStatementParserRuleCall_4_0 = (RuleCall)cThenStatementsAssignment_4.eContents().get(0);
		
		//ElseIfStatement:
		//	'else' 'if' condition=Expression 'then'
		//	thenStatements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' 'if' condition=Expression 'then' thenStatements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//thenStatements+=Statement*
		public Assignment getThenStatementsAssignment_4() { return cThenStatementsAssignment_4; }
		
		//Statement
		public RuleCall getThenStatementsStatementParserRuleCall_4_0() { return cThenStatementsStatementParserRuleCall_4_0; }
	}
	public class ElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.ElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBeginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElseStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseStatementsStatementParserRuleCall_3_0 = (RuleCall)cElseStatementsAssignment_3.eContents().get(0);
		
		//ElseStatement:
		//	{ElseStatement} 'else' 'begin'
		//	elseStatements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseStatement} 'else' 'begin' elseStatements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{ElseStatement}
		public Action getElseStatementAction_0() { return cElseStatementAction_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//'begin'
		public Keyword getBeginKeyword_2() { return cBeginKeyword_2; }
		
		//elseStatements+=Statement*
		public Assignment getElseStatementsAssignment_3() { return cElseStatementsAssignment_3; }
		
		//Statement
		public RuleCall getElseStatementsStatementParserRuleCall_3_0() { return cElseStatementsStatementParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	XorExpression ({AndExpression.left=current} 'and' right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({AndExpression.left=current} 'and' right=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} 'and' right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cXorKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression Expression:
		//	EqualityExpression ({XorExpression.left=current} 'xor' right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({XorExpression.left=current} 'xor' right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({XorExpression.left=current} 'xor' right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XorExpression.left=current}
		public Action getXorExpressionLeftAction_1_0() { return cXorExpressionLeftAction_1_0; }
		
		//'xor'
		public Keyword getXorKeyword_1_1() { return cXorKeyword_1_1; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression Expression:
		//	ComparisonExpression ({EqualityExpression.left=current} operator=EqualityOperator right=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({EqualityExpression.left=current} operator=EqualityOperator right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} operator=EqualityOperator right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_1_0; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Expression:
		//	AdditiveExpression ({ComparisonExpression.left=current} operator=ComparisonOperator right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({ComparisonExpression.left=current} operator=ComparisonOperator right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} operator=ComparisonOperator right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_1_1_0() { return cOperatorComparisonOperatorEnumRuleCall_1_1_0; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAdditiveExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression (=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
		//	right=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression (=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
		//right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//(=> ({AdditiveExpression.left=current} operator=AdditiveOperator) right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AdditiveExpression.left=current} operator=AdditiveOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0_0_0() { return cAdditiveExpressionLeftAction_1_0_0_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_0_0_1_0; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	TerminalExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator
		//	right=TerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator right=TerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//({MultiplicativeExpression.left=current} operator=MultiplicativeOperator right=TerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0() { return cMultiplicativeExpressionLeftAction_1_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }
		
		//right=TerminalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_1_2_0() { return cRightTerminalExpressionParserRuleCall_1_2_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cValueIdElementCrossReference_0_1_0 = (CrossReference)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cValueIdElementIDTerminalRuleCall_0_1_0_1 = (RuleCall)cValueIdElementCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAssignment_2_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntegerLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueLongParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRealLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNotExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNotKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOperandAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOperandTerminalExpressionParserRuleCall_5_2_0 = (RuleCall)cOperandAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNegationExpressionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOperandAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOperandTerminalExpressionParserRuleCall_6_2_0 = (RuleCall)cOperandAssignment_6_2.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//TerminalExpression Expression:
		//	{IdExpression} value=[IdElement] | {StringLiteral} value=STRING | {BooleanLiteral} (value?='true' | 'false') |
		//	{IntegerLiteral} value=Long | {RealLiteral} value=Double | {NotExpression} 'not' operand=TerminalExpression |
		//	{NegationExpression} '-' operand=TerminalExpression | IfExpression |
		//	'(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IdExpression} value=[IdElement] | {StringLiteral} value=STRING | {BooleanLiteral} (value?='true' | 'false') |
		//{IntegerLiteral} value=Long | {RealLiteral} value=Double | {NotExpression} 'not' operand=TerminalExpression |
		//{NegationExpression} '-' operand=TerminalExpression | IfExpression | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IdExpression} value=[IdElement]
		public Group getGroup_0() { return cGroup_0; }
		
		//{IdExpression}
		public Action getIdExpressionAction_0_0() { return cIdExpressionAction_0_0; }
		
		//value=[IdElement]
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//[IdElement]
		public CrossReference getValueIdElementCrossReference_0_1_0() { return cValueIdElementCrossReference_0_1_0; }
		
		//ID
		public RuleCall getValueIdElementIDTerminalRuleCall_0_1_0_1() { return cValueIdElementIDTerminalRuleCall_0_1_0_1; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BooleanLiteral} (value?='true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_2_0() { return cBooleanLiteralAction_2_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//value?='true'
		public Assignment getValueAssignment_2_1_0() { return cValueAssignment_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1_1() { return cFalseKeyword_2_1_1; }
		
		//{IntegerLiteral} value=Long
		public Group getGroup_3() { return cGroup_3; }
		
		//{IntegerLiteral}
		public Action getIntegerLiteralAction_3_0() { return cIntegerLiteralAction_3_0; }
		
		//value=Long
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Long
		public RuleCall getValueLongParserRuleCall_3_1_0() { return cValueLongParserRuleCall_3_1_0; }
		
		//{RealLiteral} value=Double
		public Group getGroup_4() { return cGroup_4; }
		
		//{RealLiteral}
		public Action getRealLiteralAction_4_0() { return cRealLiteralAction_4_0; }
		
		//value=Double
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_4_1_0() { return cValueDoubleParserRuleCall_4_1_0; }
		
		//{NotExpression} 'not' operand=TerminalExpression
		public Group getGroup_5() { return cGroup_5; }
		
		//{NotExpression}
		public Action getNotExpressionAction_5_0() { return cNotExpressionAction_5_0; }
		
		//'not'
		public Keyword getNotKeyword_5_1() { return cNotKeyword_5_1; }
		
		//operand=TerminalExpression
		public Assignment getOperandAssignment_5_2() { return cOperandAssignment_5_2; }
		
		//TerminalExpression
		public RuleCall getOperandTerminalExpressionParserRuleCall_5_2_0() { return cOperandTerminalExpressionParserRuleCall_5_2_0; }
		
		//{NegationExpression} '-' operand=TerminalExpression
		public Group getGroup_6() { return cGroup_6; }
		
		//{NegationExpression}
		public Action getNegationExpressionAction_6_0() { return cNegationExpressionAction_6_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_6_1() { return cHyphenMinusKeyword_6_1; }
		
		//operand=TerminalExpression
		public Assignment getOperandAssignment_6_2() { return cOperandAssignment_6_2; }
		
		//TerminalExpression
		public RuleCall getOperandTerminalExpressionParserRuleCall_6_2_0() { return cOperandTerminalExpressionParserRuleCall_6_2_0; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_7() { return cIfExpressionParserRuleCall_7; }
		
		//'(' Expression ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_8_1() { return cExpressionParserRuleCall_8_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementsStatementParserRuleCall_3_0 = (RuleCall)cThenStatementsAssignment_3.eContents().get(0);
		private final Assignment cThenValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenValueExpressionParserRuleCall_4_0 = (RuleCall)cThenValueAssignment_4.eContents().get(0);
		private final Assignment cElseIfsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseIfsElseIfExpressionParserRuleCall_5_0 = (RuleCall)cElseIfsAssignment_5.eContents().get(0);
		private final Keyword cElseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cBeginKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElseStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseStatementsStatementParserRuleCall_8_0 = (RuleCall)cElseStatementsAssignment_8.eContents().get(0);
		private final Assignment cElseValueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElseValueExpressionParserRuleCall_9_0 = (RuleCall)cElseValueAssignment_9.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//IfExpression:
		//	'if' condition=Expression 'then'
		//	=> thenStatements+=Statement*
		//	thenValue=Expression
		//	elseIfs+=ElseIfExpression*
		//	'else' 'begin'
		//	=> elseStatements+=Statement*
		//	elseValue=Expression
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression 'then' => thenStatements+=Statement* thenValue=Expression elseIfs+=ElseIfExpression* 'else'
		//'begin' => elseStatements+=Statement* elseValue=Expression 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//=> thenStatements+=Statement*
		public Assignment getThenStatementsAssignment_3() { return cThenStatementsAssignment_3; }
		
		//Statement
		public RuleCall getThenStatementsStatementParserRuleCall_3_0() { return cThenStatementsStatementParserRuleCall_3_0; }
		
		//thenValue=Expression
		public Assignment getThenValueAssignment_4() { return cThenValueAssignment_4; }
		
		//Expression
		public RuleCall getThenValueExpressionParserRuleCall_4_0() { return cThenValueExpressionParserRuleCall_4_0; }
		
		//elseIfs+=ElseIfExpression*
		public Assignment getElseIfsAssignment_5() { return cElseIfsAssignment_5; }
		
		//ElseIfExpression
		public RuleCall getElseIfsElseIfExpressionParserRuleCall_5_0() { return cElseIfsElseIfExpressionParserRuleCall_5_0; }
		
		//'else'
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }
		
		//'begin'
		public Keyword getBeginKeyword_7() { return cBeginKeyword_7; }
		
		//=> elseStatements+=Statement*
		public Assignment getElseStatementsAssignment_8() { return cElseStatementsAssignment_8; }
		
		//Statement
		public RuleCall getElseStatementsStatementParserRuleCall_8_0() { return cElseStatementsStatementParserRuleCall_8_0; }
		
		//elseValue=Expression
		public Assignment getElseValueAssignment_9() { return cElseValueAssignment_9; }
		
		//Expression
		public RuleCall getElseValueExpressionParserRuleCall_9_0() { return cElseValueExpressionParserRuleCall_9_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class ElseIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.ElseIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementsStatementParserRuleCall_4_0 = (RuleCall)cThenStatementsAssignment_4.eContents().get(0);
		private final Assignment cThenValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenValueExpressionParserRuleCall_5_0 = (RuleCall)cThenValueAssignment_5.eContents().get(0);
		
		//ElseIfExpression:
		//	'else' 'if' condition=Expression 'then'
		//	=> thenStatements+=Statement*
		//	thenValue=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' 'if' condition=Expression 'then' => thenStatements+=Statement* thenValue=Expression
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//=> thenStatements+=Statement*
		public Assignment getThenStatementsAssignment_4() { return cThenStatementsAssignment_4; }
		
		//Statement
		public RuleCall getThenStatementsStatementParserRuleCall_4_0() { return cThenStatementsStatementParserRuleCall_4_0; }
		
		//thenValue=Expression
		public Assignment getThenValueAssignment_5() { return cThenValueAssignment_5; }
		
		//Expression
		public RuleCall getThenValueExpressionParserRuleCall_5_0() { return cThenValueExpressionParserRuleCall_5_0; }
	}
	public class LongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Long");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Long ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double ecore::EDouble:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	public class BuiltInTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.BuiltInType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBooleanKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERIntegerKeyword_2_0 = (Keyword)cINTEGEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREALRealKeyword_3_0 = (Keyword)cREALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BuiltInType:
		//	STRING='String' |
		//	BOOLEAN='Boolean' |
		//	INTEGER='Integer' |
		//	REAL='Real';
		public EnumRule getRule() { return rule; }
		
		//STRING='String' | BOOLEAN='Boolean' | INTEGER='Integer' | REAL='Real'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//BOOLEAN='Boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }
		
		//'Boolean'
		public Keyword getBOOLEANBooleanKeyword_1_0() { return cBOOLEANBooleanKeyword_1_0; }
		
		//INTEGER='Integer'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_2() { return cINTEGEREnumLiteralDeclaration_2; }
		
		//'Integer'
		public Keyword getINTEGERIntegerKeyword_2_0() { return cINTEGERIntegerKeyword_2_0; }
		
		//REAL='Real'
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_3() { return cREALEnumLiteralDeclaration_3; }
		
		//'Real'
		public Keyword getREALRealKeyword_3_0() { return cREALRealKeyword_3_0; }
	}
	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALSLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNOT_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator:
		//	EQUALS='=' |
		//	NOT_EQUALS='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUALS='=' | NOT_EQUALS='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS='='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALSEqualsSignKeyword_0_0() { return cEQUALSEqualsSignKeyword_0_0; }
		
		//NOT_EQUALS='<>'
		public EnumLiteralDeclaration getNOT_EQUALSEnumLiteralDeclaration_1() { return cNOT_EQUALSEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getNOT_EQUALSLessThanSignGreaterThanSignKeyword_1_0() { return cNOT_EQUALSLessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERGreaterThanSignKeyword_2_0 = (Keyword)cGREATEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ComparisonOperator:
		//	LESS='<' |
		//	LESS_EQUAL='<=' |
		//	GREATER='>' |
		//	GREATER_EQUAL='>=';
		public EnumRule getRule() { return rule; }
		
		//LESS='<' | LESS_EQUAL='<=' | GREATER='>' | GREATER_EQUAL='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//LESS_EQUAL='<='
		public EnumLiteralDeclaration getLESS_EQUALEnumLiteralDeclaration_1() { return cLESS_EQUALEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getLESS_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_EQUALLessThanSignEqualsSignKeyword_1_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_2() { return cGREATEREnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_2_0() { return cGREATERGreaterThanSignKeyword_2_0; }
		
		//GREATER_EQUAL='>='
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_3() { return cGREATER_EQUALEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUALGreaterThanSignEqualsSignKeyword_3_0; }
	}
	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	ADD='+' |
		//	SUBTRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBTRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT='-'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREAL_DIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREAL_DIVIDESolidusKeyword_1_0 = (Keyword)cREAL_DIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGER_DIVIDEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGER_DIVIDEDivKeyword_2_0 = (Keyword)cINTEGER_DIVIDEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMODULUSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMODULUSModKeyword_3_0 = (Keyword)cMODULUSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	MULTIPLY='*' |
		//	REAL_DIVIDE='/' |
		//	INTEGER_DIVIDE='div' |
		//	MODULUS='mod';
		public EnumRule getRule() { return rule; }
		
		//MULTIPLY='*' | REAL_DIVIDE='/' | INTEGER_DIVIDE='div' | MODULUS='mod'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIPLY='*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }
		
		//REAL_DIVIDE='/'
		public EnumLiteralDeclaration getREAL_DIVIDEEnumLiteralDeclaration_1() { return cREAL_DIVIDEEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getREAL_DIVIDESolidusKeyword_1_0() { return cREAL_DIVIDESolidusKeyword_1_0; }
		
		//INTEGER_DIVIDE='div'
		public EnumLiteralDeclaration getINTEGER_DIVIDEEnumLiteralDeclaration_2() { return cINTEGER_DIVIDEEnumLiteralDeclaration_2; }
		
		//'div'
		public Keyword getINTEGER_DIVIDEDivKeyword_2_0() { return cINTEGER_DIVIDEDivKeyword_2_0; }
		
		//MODULUS='mod'
		public EnumLiteralDeclaration getMODULUSEnumLiteralDeclaration_3() { return cMODULUSEnumLiteralDeclaration_3; }
		
		//'mod'
		public Keyword getMODULUSModKeyword_3_0() { return cMODULUSModKeyword_3_0; }
	}
	
	private final ProgramElements pProgram;
	private final CallableElements pCallable;
	private final ProcedureElements pProcedure;
	private final FunctionElements pFunction;
	private final IdElementElements pIdElement;
	private final ParameterElements pParameter;
	private final StatementElements pStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final BuiltInTypeElements eBuiltInType;
	private final WhileLoopElements pWhileLoop;
	private final IfStatementElements pIfStatement;
	private final ElseIfStatementElements pElseIfStatement;
	private final ElseStatementElements pElseStatement;
	private final ExpressionElements pExpression;
	private final AndExpressionElements pAndExpression;
	private final XorExpressionElements pXorExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements eEqualityOperator;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ComparisonOperatorElements eComparisonOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveOperatorElements eAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeOperatorElements eMultiplicativeOperator;
	private final TerminalExpressionElements pTerminalExpression;
	private final IfExpressionElements pIfExpression;
	private final ElseIfExpressionElements pElseIfExpression;
	private final LongElements pLong;
	private final DoubleElements pDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FireGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCallable = new CallableElements();
		this.pProcedure = new ProcedureElements();
		this.pFunction = new FunctionElements();
		this.pIdElement = new IdElementElements();
		this.pParameter = new ParameterElements();
		this.pStatement = new StatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.eBuiltInType = new BuiltInTypeElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIfStatement = new ElseIfStatementElements();
		this.pElseStatement = new ElseStatementElements();
		this.pExpression = new ExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pXorExpression = new XorExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.eEqualityOperator = new EqualityOperatorElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.eAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.eMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pElseIfExpression = new ElseIfExpressionElements();
		this.pLong = new LongElements();
		this.pDouble = new DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fire.Fire".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program}
	//	'program'
	//	callables+=Callable*
	//	statements+=Statement*
	//	'end';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Callable:
	//	Procedure | Function;
	public CallableElements getCallableAccess() {
		return pCallable;
	}
	
	public ParserRule getCallableRule() {
		return getCallableAccess().getRule();
	}
	
	//Procedure:
	//	'procedure' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//	statements+=Statement*
	//	'end';
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Function:
	//	'function' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=BuiltInType
	//	=> statements+=Statement*
	//	value=Expression
	//	'end';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	////Unused rule is here to create common super type for Parameter and VariableDeclaration
	//IdElement:
	//	Parameter | VariableDeclaration;
	public IdElementElements getIdElementAccess() {
		return pIdElement;
	}
	
	public ParserRule getIdElementRule() {
		return getIdElementAccess().getRule();
	}
	
	//Parameter:
	//	name=ID ':' type=BuiltInType;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Statement:
	//	VariableDeclaration | {AssignmentStatement} variable=[IdElement] ':=' value=Expression ';'? | WhileLoop | IfStatement
	//	| {CallStatement} callable=[Callable] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ';'? |
	//	{WritelnStatement} 'writeln' '(' argument=Expression ')' ';'?;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//	(constant?='const' | 'var') name=ID ':' type=BuiltInType ':=' value=Expression ';'?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//enum BuiltInType:
	//	STRING='String' |
	//	BOOLEAN='Boolean' |
	//	INTEGER='Integer' |
	//	REAL='Real';
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return eBuiltInType;
	}
	
	public EnumRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}
	
	//WhileLoop:
	//	'while' condition=Expression 'do'
	//	statements+=Statement*
	//	'end';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//IfStatement:
	//	'if' condition=Expression 'then'
	//	thenStatements+=Statement*
	//	elseIfs+=ElseIfStatement*
	//	else=ElseStatement?
	//	'end';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElseIfStatement:
	//	'else' 'if' condition=Expression 'then'
	//	thenStatements+=Statement*;
	public ElseIfStatementElements getElseIfStatementAccess() {
		return pElseIfStatement;
	}
	
	public ParserRule getElseIfStatementRule() {
		return getElseIfStatementAccess().getRule();
	}
	
	//ElseStatement:
	//	{ElseStatement} 'else' 'begin'
	//	elseStatements+=Statement*;
	public ElseStatementElements getElseStatementAccess() {
		return pElseStatement;
	}
	
	public ParserRule getElseStatementRule() {
		return getElseStatementAccess().getRule();
	}
	
	//Expression:
	//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	XorExpression ({AndExpression.left=current} 'and' right=XorExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//XorExpression Expression:
	//	EqualityExpression ({XorExpression.left=current} 'xor' right=EqualityExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	ComparisonExpression ({EqualityExpression.left=current} operator=EqualityOperator right=ComparisonExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//enum EqualityOperator:
	//	EQUALS='=' |
	//	NOT_EQUALS='<>';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return eEqualityOperator;
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//ComparisonExpression Expression:
	//	AdditiveExpression ({ComparisonExpression.left=current} operator=ComparisonOperator right=AdditiveExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//	LESS='<' |
	//	LESS_EQUAL='<=' |
	//	GREATER='>' |
	//	GREATER_EQUAL='>=';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	MultiplicativeExpression (=> ({AdditiveExpression.left=current} operator=AdditiveOperator)
	//	right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//enum AdditiveOperator:
	//	ADD='+' |
	//	SUBTRACT='-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return eAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	TerminalExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator
	//	right=TerminalExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//enum MultiplicativeOperator:
	//	MULTIPLY='*' |
	//	REAL_DIVIDE='/' |
	//	INTEGER_DIVIDE='div' |
	//	MODULUS='mod';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return eMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	{IdExpression} value=[IdElement] | {StringLiteral} value=STRING | {BooleanLiteral} (value?='true' | 'false') |
	//	{IntegerLiteral} value=Long | {RealLiteral} value=Double | {NotExpression} 'not' operand=TerminalExpression |
	//	{NegationExpression} '-' operand=TerminalExpression | IfExpression |
	//	'(' Expression ')';
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//IfExpression:
	//	'if' condition=Expression 'then'
	//	=> thenStatements+=Statement*
	//	thenValue=Expression
	//	elseIfs+=ElseIfExpression*
	//	'else' 'begin'
	//	=> elseStatements+=Statement*
	//	elseValue=Expression
	//	'end';
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//ElseIfExpression:
	//	'else' 'if' condition=Expression 'then'
	//	=> thenStatements+=Statement*
	//	thenValue=Expression;
	public ElseIfExpressionElements getElseIfExpressionAccess() {
		return pElseIfExpression;
	}
	
	public ParserRule getElseIfExpressionRule() {
		return getElseIfExpressionAccess().getRule();
	}
	
	//Long ecore::ELong:
	//	INT;
	public LongElements getLongAccess() {
		return pLong;
	}
	
	public ParserRule getLongRule() {
		return getLongAccess().getRule();
	}
	
	//Double ecore::EDouble:
	//	INT '.' INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
