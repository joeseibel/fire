/*
 * generated by Xtext 2.10.0
 */
package fire.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FireGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsWritelnStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Program:
		//	{Program}
		//	'program'
		//	statements+=WritelnStatement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'program' statements+=WritelnStatement* 'end'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//statements+=WritelnStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//WritelnStatement
		public RuleCall getStatementsWritelnStatementParserRuleCall_2_0() { return cStatementsWritelnStatementParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class WritelnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.WritelnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWritelnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentExpressionParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WritelnStatement:
		//	'writeln' '(' argument=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'writeln' '(' argument=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'writeln'
		public Keyword getWritelnKeyword_0() { return cWritelnKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argument=Expression
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_0() { return cArgumentExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_1_0_0 = (Keyword)cValueAssignment_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueLongParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRealLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNotExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNotKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOperandAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperandExpressionParserRuleCall_4_2_0 = (RuleCall)cOperandAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Expression:
		//	{StringLiteral} value=STRING | {BooleanLiteral} (value?='true' | 'false') | {IntegerLiteral} value=Long |
		//	{RealLiteral} value=Double | {NotExpression} 'not' operand=Expression |
		//	'(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringLiteral} value=STRING | {BooleanLiteral} (value?='true' | 'false') | {IntegerLiteral} value=Long | {RealLiteral}
		//value=Double | {NotExpression} 'not' operand=Expression | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_0_0() { return cStringLiteralAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{BooleanLiteral} (value?='true' | 'false')
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_1_0_0() { return cValueTrueKeyword_1_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
		
		//{IntegerLiteral} value=Long
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntegerLiteral}
		public Action getIntegerLiteralAction_2_0() { return cIntegerLiteralAction_2_0; }
		
		//value=Long
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Long
		public RuleCall getValueLongParserRuleCall_2_1_0() { return cValueLongParserRuleCall_2_1_0; }
		
		//{RealLiteral} value=Double
		public Group getGroup_3() { return cGroup_3; }
		
		//{RealLiteral}
		public Action getRealLiteralAction_3_0() { return cRealLiteralAction_3_0; }
		
		//value=Double
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_1_0() { return cValueDoubleParserRuleCall_3_1_0; }
		
		//{NotExpression} 'not' operand=Expression
		public Group getGroup_4() { return cGroup_4; }
		
		//{NotExpression}
		public Action getNotExpressionAction_4_0() { return cNotExpressionAction_4_0; }
		
		//'not'
		public Keyword getNotKeyword_4_1() { return cNotKeyword_4_1; }
		
		//operand=Expression
		public Assignment getOperandAssignment_4_2() { return cOperandAssignment_4_2; }
		
		//Expression
		public RuleCall getOperandExpressionParserRuleCall_4_2_0() { return cOperandExpressionParserRuleCall_4_2_0; }
		
		//'(' Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_5_1() { return cExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class LongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Long");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Long ecore::ELong:
		//	INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fire.Fire.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double ecore::EDouble:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final ProgramElements pProgram;
	private final WritelnStatementElements pWritelnStatement;
	private final ExpressionElements pExpression;
	private final LongElements pLong;
	private final DoubleElements pDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FireGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pWritelnStatement = new WritelnStatementElements();
		this.pExpression = new ExpressionElements();
		this.pLong = new LongElements();
		this.pDouble = new DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fire.Fire".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program}
	//	'program'
	//	statements+=WritelnStatement*
	//	'end';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//WritelnStatement:
	//	'writeln' '(' argument=Expression ')';
	public WritelnStatementElements getWritelnStatementAccess() {
		return pWritelnStatement;
	}
	
	public ParserRule getWritelnStatementRule() {
		return getWritelnStatementAccess().getRule();
	}
	
	//Expression:
	//	{StringLiteral} value=STRING | {BooleanLiteral} (value?='true' | 'false') | {IntegerLiteral} value=Long |
	//	{RealLiteral} value=Double | {NotExpression} 'not' operand=Expression |
	//	'(' Expression ')';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Long ecore::ELong:
	//	INT
	public LongElements getLongAccess() {
		return pLong;
	}
	
	public ParserRule getLongRule() {
		return getLongAccess().getRule();
	}
	
	//Double ecore::EDouble:
	//	INT '.' INT
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
