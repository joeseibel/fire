grammar fire.Fire with org.eclipse.xtext.common.Terminals

generate fire "http://www.Fire.fire"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program: {Program}
	'program'
		statements+=Statement*
	'end'
;

Statement:
	{ConstantDeclaration} 'const' name=ID ':' type=BuiltInType ':=' value=Expression |
	{WritelnStatement} 'writeln' '(' argument=Expression ')'
;

enum BuiltInType:
	STRING='String' |
	BOOLEAN='Boolean' |
	INTEGER='Integer' |
	REAL='Real'
;

Expression:
	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
;

AndExpression returns Expression:
	XorExpression ({AndExpression.left=current} 'and' right=XorExpression)*
;

XorExpression returns Expression:
	EqualityExpression ({XorExpression.left=current} 'xor' right=EqualityExpression)*
;

EqualityExpression returns Expression:
	ComparisonExpression ({EqualityExpression.left=current} operator=EqualityOperator right=ComparisonExpression)*
;

enum EqualityOperator:
	EQUALS='=' |
	NOT_EQUALS='<>'
;

ComparisonExpression returns Expression:
	AdditiveExpression ({ComparisonExpression.left=current} operator=ComparisonOperator right=AdditiveExpression)*
;

enum ComparisonOperator:
	LESS='<' |
	LESS_EQUAL='<=' |
	GREATER='>' |
	GREATER_EQUAL='>='
;

AdditiveExpression returns Expression:
	MultiplicativeExpression ({AdditiveExpression.left=current} operator=AdditiveOperator right=MultiplicativeExpression)*
;

enum AdditiveOperator:
	ADD='+' |
	SUBTRACT='-'
;

MultiplicativeExpression returns Expression:
	TerminalExpression ({MultiplicativeExpression.left=current} operator=MultiplicativeOperator right=TerminalExpression)*
;

enum MultiplicativeOperator:
	MULTIPLY='*' |
	REAL_DIVIDE='/' |
	INTEGER_DIVIDE='div' |
	MODULUS='mod'
;

TerminalExpression returns Expression:
	{StringLiteral} value=STRING |
	{BooleanLiteral} (value?='true' | 'false') |
	{IntegerLiteral} value=Long |
	{RealLiteral} value=Double |
	{NotExpression} 'not' operand=TerminalExpression |
	{NegationExpression} '-' operand=TerminalExpression |
	'(' Expression ')'
;

Long returns ecore::ELong:
	INT
;

Double returns ecore::EDouble:
	INT '.' INT
;