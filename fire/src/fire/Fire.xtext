grammar fire.Fire with org.eclipse.xtext.common.Terminals

generate fire "http://www.Fire.fire"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program: {Program}
	'program'
		statements+=WritelnStatement*
	'end'
;

WritelnStatement:
	'writeln' '(' argument=Expression ')'
;

Expression:
	TerminalExpression (=>({MultiplicativeExpression.left=current} operator=MultiplicativeOperator) right=TerminalExpression)*
;

enum MultiplicativeOperator:
	MULTIPLY='*' |
	REAL_DIVIDE='/' |
	INTEGER_DIVIDE='div' |
	MODULUS='mod'
;

TerminalExpression returns Expression:
	{StringLiteral} value=STRING |
	{BooleanLiteral} (value?='true' | 'false') |
	{IntegerLiteral} value=Long |
	{RealLiteral} value=Double |
	{NotExpression} 'not' operand=Expression |
	{NegationExpression} '-' operand=Expression |
	'(' Expression ')'
;

Long returns ecore::ELong:
	INT
;

Double returns ecore::EDouble:
	INT '.' INT
;